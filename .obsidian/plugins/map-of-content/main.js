/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

const LINKED_TO = " => ";
const LINKED_FROM = " <= ";
const LINKED_CN = "None";
const LINKED_BOTH = " <=> ";
const MOC_VIEW_TYPE = "map-of-content";

class FileItem {
    constructor(path, extension, links_to, linked_from, distance_from_CN) {
        this.path = path;
        this.extension = extension;
        this.links_to = links_to;
        this.linked_from = linked_from;
        this.distance_from_CN = distance_from_CN;
    }
}

const Log = (message) => {
};
const RemoveExtension = (path, extension = ".md") => {
    if (path.endsWith(extension)) {
        return path.slice(0, -extension.length);
    }
    return path;
};
/**@returns True if CTRL / Meta is pressed */
const IsCtrlPressed = (e) => {
    return window.navigator.userAgent.includes("Macintosh")
        ? e.metaKey
        : e.ctrlKey;
};
/**  Returns only the name of the actual file  */
const FileNameFromPath = (path) => {
    return path.split("/").last();
};
/**  return the full path if there are two or more notes with the same filename and extension, else only the filename  */
const GetDisplayName = (path, db) => {
    let file_name = FileNameFromPath(path);
    let display_name = null;
    if (db.duplicate_file_status.get(file_name)) {
        display_name = RemoveExtension(path);
    }
    else {
        display_name = RemoveExtension(file_name);
    }
    return display_name;
};
const NavigateToFile = async (app, path, event) => {
    let file = app.metadataCache.getFirstLinkpathDest(path, "/");
    if (!file)
        return;
    IsCtrlPressed(event)
        ? app.workspace.splitActiveLeaf()
        : app.workspace.getUnpinnedLeaf();
    app.workspace.openLinkText(path, "/");
};
/** Get the paths of all folders in the vault, empty or not */
const GetAllFolders = (app) => {
    let vault_files = app.vault.getFiles();
    let all_folder_paths = [];
    vault_files.forEach((file) => {
        // cut of filename
        let folder_path = file.path.slice(0, file.path.length - (file.basename.length + file.extension.length + 1));
        // add path to collected paths
        if (folder_path.length && !all_folder_paths.contains(folder_path)) {
            all_folder_paths.push(folder_path);
        }
    });
    // store all parent folder paths as unique paths if they aren't yet because they don't include any notes directly
    all_folder_paths.forEach((path) => {
        let all_sub_paths = path.split("/");
        for (let i = 1; i < all_sub_paths.length - 1; i++) {
            let partial_path = all_sub_paths.slice(0, i).join("/") + "/";
            if (!all_folder_paths.contains(partial_path)) {
                all_folder_paths.push(partial_path);
            }
        }
    });
    return all_folder_paths;
};

class DBManager {
    constructor(plugin) {
        this.database_updating = true;
        this.app = plugin.app;
        this.plugin = plugin;
        this.settings = plugin.settings;
        this.all_paths = [];
        this.db = {};
        this.db_entries = Object.entries(this.db);
    }
    init() { }
    async update(silent = false) {
        this.database_complete = false;
        this.database_updating = true;
        try {
            if (this.plugin.CNexists()) {
                let start_tmsp = Date.now();
                if (!silent) {
                    new obsidian.Notice("Updating the Map of Content...");
                }
                Log("Updating the Map of Content...");
                await new Promise((r) => setTimeout(r, 0));
                this.updateDB();
                await new Promise((r) => setTimeout(r, 0));
                this.get_paths_ran = 0;
                this.updateDepthInformation();
                this.all_paths.length = 0;
                let path_so_far = {
                    all_members: [this.settings.get("CN_path")],
                    items: [[this.settings.get("CN_path"), LINKED_CN]],
                };
                await new Promise((r) => setTimeout(r, 0));
                this.followPaths(path_so_far);
                await new Promise((r) => setTimeout(r, 0));
                this.updateDescendants();
                if (!silent) {
                    new obsidian.Notice("Update complete");
                }
                let end_tmsp = Date.now();
                Log("Update complete, Took " + String((end_tmsp - start_tmsp) / 1000));
                this.database_complete = true;
            }
        }
        finally {
            this.database_updating = false;
            this.plugin.rerender();
        }
    }
    getNoteFromPath(path) {
        if (path in this.db) {
            return this.db[path];
        }
    }
    /** return all paths that include a certain note. Only return the path up to that note*/
    findPaths(path) {
        let filtered_paths = [];
        let filtered_paths_json = JSON.stringify(filtered_paths);
        this.all_paths.forEach((p) => {
            if (p.all_members.includes(path)) {
                if (p.all_members.last() == path) {
                    filtered_paths.push(p);
                }
                else {
                    let index = p.all_members.indexOf(path) + 1;
                    let chopped_of_path = p.items.slice(0, index);
                    if (!filtered_paths_json.includes(JSON.stringify(chopped_of_path))) {
                        // return a path element containing only the parts of the path information up to the note in question
                        filtered_paths.push({
                            all_members: p.all_members.slice(0, index),
                            items: p.items.slice(0, index),
                        });
                        filtered_paths_json = JSON.stringify(filtered_paths);
                    }
                }
            }
        });
        return filtered_paths;
    }
    all_notes() {
        return this.db_entries.map(([key, value]) => value);
    }
    updateDB() {
        // delete old state
        for (let note in this.db) {
            delete this.db[note];
        }
        // read all files
        let vault_files = this.app.vault.getFiles();
        Log("Total number of files in vault: " + String(vault_files.length));
        vault_files.forEach((file) => {
            if (!this.settings.isExludedFile(file)) {
                this.db[file.path] = new FileItem(file.path, file.extension, [], [], null);
            }
        });
        this.db_entries = Object.entries(this.db);
        this.db_keys = Object.keys(this.db);
        this.duplicate_file_status = new Map();
        this.all_notes().forEach((note) => {
            let file_name = FileNameFromPath(note.path);
            if (this.duplicate_file_status.has(file_name)) {
                // If the file name is encountered twice or more, set it's duplicate status to true
                this.duplicate_file_status.set(file_name, true);
            }
            else {
                this.duplicate_file_status.set(file_name, false);
            }
        });
        // update the db_entries representation of the db
        this.db_entries = Object.entries(this.db);
        this.all_notes().forEach((note) => {
            if (note.extension != "md") {
                // skip if it's not an md file. Other file types can't link to anything
                return;
            }
            //  save all the links this note links to
            let this_links_to = [];
            let linkcache = this.app.metadataCache.getCache(note.path).links;
            let all_links = [];
            if (linkcache) {
                linkcache.forEach((val) => {
                    all_links.push(val.link);
                });
            }
            let transclusions = this.app.metadataCache.getCache(note.path).embeds;
            if (transclusions) {
                transclusions.forEach((val) => {
                    all_links.push(val.link);
                });
            }
            all_links.forEach((link) => {
                // remove references to blocks or sections
                link = link.split("#")[0];
                link = link.split("^")[0];
                all_links.push(link);
                // check if the link is valid
                let link_dest = this.app.metadataCache.getFirstLinkpathDest(link, "/");
                //TODO is it neccessary to avoid including links multiple times? maybe they can't even be duplicate in the linkcache
                if (link_dest &&
                    !this_links_to.includes(link_dest.path) &&
                    this.db_keys.contains(link_dest.path)) {
                    this_links_to.push(link_dest.path);
                }
            });
            if (!this_links_to.length)
                return; // no links
            // save links_to information to db
            this.db[note.path].links_to = this_links_to;
            // add a "linked_from" reference to the db entry of all notes that are linked to from this note
            this_links_to.forEach((link) => {
                if (!this.db[link].linked_from.includes(note.path)) {
                    this.db[link].linked_from.push(note.path);
                }
            });
        });
    }
    /** starting from the CN, follow all paths and store the information on how long the shortest path to each note is*/
    updateDepthInformation() {
        Log("Analyzing distance from Central Note. CN path: " +
            this.settings.get("CN_path"));
        let depth = 0; // distance from the CN. starts at zero
        let checked_links = []; // all the notes that have already been visited. dont visit them again to prevent endless loops
        let do_continue = true;
        // start at the the CN
        let links = [this.settings.get("CN_path")];
        while (do_continue) {
            let next_links = [];
            links.forEach((link) => {
                // extract all active and passive connections (linked to or from) for the next iteration of link-following
                let note = this.getNoteFromPath(link);
                note.links_to.forEach((link) => {
                    if (!checked_links.contains(link) && !next_links.contains(link)) {
                        next_links.push(link);
                    }
                });
                note.linked_from.forEach((link) => {
                    if (!checked_links.contains(link) && !next_links.contains(link)) {
                        next_links.push(link);
                    }
                });
                // update the info on how far the note is removed from CN
                if (note.distance_from_CN == null || note.distance_from_CN > depth) {
                    note.distance_from_CN = depth;
                }
                checked_links.push(link);
            });
            links = next_links.slice();
            if (links.length == 0) {
                do_continue = false;
            }
            depth += 1;
        }
    }
    /**
     * Recursive function that follows all possible paths from the CN that aren't unreasonably long or circular and stores them
     * @param path_so_far the path to be extended in this iteration
     */
    followPaths(path_so_far) {
        // logging
        this.get_paths_ran += 1;
        if (this.get_paths_ran % 10000 == 0) {
            Log("get paths ran " + String(this.get_paths_ran));
        }
        let note = this.db[path_so_far.all_members.last()];
        let all_members = path_so_far.all_members;
        let items = path_so_far.items;
        let new_paths_to_follow = [];
        let note_links_to = note.links_to.slice();
        let note_linked_from = note.linked_from.slice();
        note_links_to.forEach((link) => {
            // check whether the linked note also links to the current note
            let linked_to_or_both_ways = LINKED_TO;
            if (note_linked_from.contains(link)) {
                // remove it from the passive links to be followed later
                let index = note_linked_from.indexOf(link, 0);
                note_linked_from.splice(index, 1);
                linked_to_or_both_ways = LINKED_BOTH;
            }
            let new_path = {
                all_members: all_members.concat(link),
                items: items.concat([[link, linked_to_or_both_ways]]),
            };
            new_paths_to_follow.push(new_path);
        });
        note_linked_from.forEach((link) => {
            let new_path = {
                all_members: all_members.concat(link),
                items: items.concat([[link, LINKED_FROM]]),
            };
            new_paths_to_follow.push(new_path);
        });
        let called_itself = false; // whether the function called itself
        // function calls itself to explore every new path
        new_paths_to_follow.forEach((path) => {
            // the path without the next note that is to be explored
            let all_items_so_far = path.all_members.slice(0, -1);
            let last_item_path = path.all_members.last();
            let last_item = this.getNoteFromPath(last_item_path);
            // stop if this note is already part of the explored path
            if (all_items_so_far.includes(last_item_path)) {
                return;
            }
            // stop if the path meanders too much
            if (path.all_members.length - last_item.distance_from_CN > 1) {
                return;
            }
            this.followPaths(path);
            called_itself = true;
        });
        if (!called_itself) {
            // only add the path if it does't lead anywhere else. No need to have paths that are parts of other paths
            this.all_paths.push(path_so_far);
        }
    }
    /** for every note, store all notes that come right after it in any path. this is for generating the Map Of Content later on */
    updateDescendants() {
        // delete old Information
        this.descendants = new Map();
        this.all_paths.forEach((p) => {
            p.all_members.forEach((note_path, index) => {
                // make sure it's not the last member of the path
                if (!(index == p.all_members.length - 1)) {
                    // create entry in descendants if it doesn't exist
                    if (!this.descendants.has(note_path)) {
                        this.descendants.set(note_path, []);
                    }
                    let next_path_member = p.all_members[index + 1];
                    // add note as descendant if it isn't already stored in array
                    if (!this.descendants.get(note_path).includes(next_path_member)) {
                        this.descendants.set(note_path, this.descendants.get(note_path).concat(next_path_member));
                    }
                }
            });
        });
    }
    getLinksFromNote(path, contained_in_db = false) {
        let linkcache = this.app.metadataCache.getCache(path).links;
        let all_links = [];
        if (linkcache) {
            linkcache.forEach((val) => {
                // check if the link is valid
                let link_dest = this.app.metadataCache.getFirstLinkpathDest(val.link, "/");
                //TODO is it neccessary to avoid including links multiple times? maybe they can't even be duplicate in the linkcache
                if (link_dest &&
                    !all_links.includes(link_dest.path) &&
                    (!contained_in_db || this.db_keys.contains(link_dest.path))) {
                    all_links.push(link_dest.path);
                }
            });
        }
        return all_links;
    }
}

function noop() { }
function add_location(element, file, line, column, char) {
    element.__svelte_meta = {
        loc: { file, line, column, char }
    };
}
function run(fn) {
    return fn();
}
function blank_object() {
    return Object.create(null);
}
function run_all(fns) {
    fns.forEach(run);
}
function is_function(thing) {
    return typeof thing === 'function';
}
function safe_not_equal(a, b) {
    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}
function is_empty(obj) {
    return Object.keys(obj).length === 0;
}
function null_to_empty(value) {
    return value == null ? '' : value;
}
function append(target, node) {
    target.appendChild(node);
}
function append_styles(target, style_sheet_id, styles) {
    const append_styles_to = get_root_for_style(target);
    if (!append_styles_to.getElementById(style_sheet_id)) {
        const style = element('style');
        style.id = style_sheet_id;
        style.textContent = styles;
        append_stylesheet(append_styles_to, style);
    }
}
function get_root_for_style(node) {
    if (!node)
        return document;
    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;
    if (root.host) {
        return root;
    }
    return document;
}
function append_stylesheet(node, style) {
    append(node.head || node, style);
}
function insert(target, node, anchor) {
    target.insertBefore(node, anchor || null);
}
function detach(node) {
    node.parentNode.removeChild(node);
}
function destroy_each(iterations, detaching) {
    for (let i = 0; i < iterations.length; i += 1) {
        if (iterations[i])
            iterations[i].d(detaching);
    }
}
function element(name) {
    return document.createElement(name);
}
function svg_element(name) {
    return document.createElementNS('http://www.w3.org/2000/svg', name);
}
function text(data) {
    return document.createTextNode(data);
}
function space() {
    return text(' ');
}
function empty() {
    return text('');
}
function listen(node, event, handler, options) {
    node.addEventListener(event, handler, options);
    return () => node.removeEventListener(event, handler, options);
}
function attr(node, attribute, value) {
    if (value == null)
        node.removeAttribute(attribute);
    else if (node.getAttribute(attribute) !== value)
        node.setAttribute(attribute, value);
}
function children(element) {
    return Array.from(element.childNodes);
}
function set_input_value(input, value) {
    input.value = value == null ? '' : value;
}
function set_style(node, key, value, important) {
    node.style.setProperty(key, value, important ? 'important' : '');
}
function toggle_class(element, name, toggle) {
    element.classList[toggle ? 'add' : 'remove'](name);
}
function custom_event(type, detail, bubbles = false) {
    const e = document.createEvent('CustomEvent');
    e.initCustomEvent(type, bubbles, false, detail);
    return e;
}

let current_component;
function set_current_component(component) {
    current_component = component;
}
function get_current_component() {
    if (!current_component)
        throw new Error('Function called outside component initialization');
    return current_component;
}
function onMount(fn) {
    get_current_component().$$.on_mount.push(fn);
}

const dirty_components = [];
const binding_callbacks = [];
const render_callbacks = [];
const flush_callbacks = [];
const resolved_promise = Promise.resolve();
let update_scheduled = false;
function schedule_update() {
    if (!update_scheduled) {
        update_scheduled = true;
        resolved_promise.then(flush);
    }
}
function add_render_callback(fn) {
    render_callbacks.push(fn);
}
let flushing = false;
const seen_callbacks = new Set();
function flush() {
    if (flushing)
        return;
    flushing = true;
    do {
        // first, call beforeUpdate functions
        // and update components
        for (let i = 0; i < dirty_components.length; i += 1) {
            const component = dirty_components[i];
            set_current_component(component);
            update(component.$$);
        }
        set_current_component(null);
        dirty_components.length = 0;
        while (binding_callbacks.length)
            binding_callbacks.pop()();
        // then, once components are updated, call
        // afterUpdate functions. This may cause
        // subsequent updates...
        for (let i = 0; i < render_callbacks.length; i += 1) {
            const callback = render_callbacks[i];
            if (!seen_callbacks.has(callback)) {
                // ...so guard against infinite loops
                seen_callbacks.add(callback);
                callback();
            }
        }
        render_callbacks.length = 0;
    } while (dirty_components.length);
    while (flush_callbacks.length) {
        flush_callbacks.pop()();
    }
    update_scheduled = false;
    flushing = false;
    seen_callbacks.clear();
}
function update($$) {
    if ($$.fragment !== null) {
        $$.update();
        run_all($$.before_update);
        const dirty = $$.dirty;
        $$.dirty = [-1];
        $$.fragment && $$.fragment.p($$.ctx, dirty);
        $$.after_update.forEach(add_render_callback);
    }
}
const outroing = new Set();
let outros;
function group_outros() {
    outros = {
        r: 0,
        c: [],
        p: outros // parent group
    };
}
function check_outros() {
    if (!outros.r) {
        run_all(outros.c);
    }
    outros = outros.p;
}
function transition_in(block, local) {
    if (block && block.i) {
        outroing.delete(block);
        block.i(local);
    }
}
function transition_out(block, local, detach, callback) {
    if (block && block.o) {
        if (outroing.has(block))
            return;
        outroing.add(block);
        outros.c.push(() => {
            outroing.delete(block);
            if (callback) {
                if (detach)
                    block.d(1);
                callback();
            }
        });
        block.o(local);
    }
}

const globals = (typeof window !== 'undefined'
    ? window
    : typeof globalThis !== 'undefined'
        ? globalThis
        : global);
function create_component(block) {
    block && block.c();
}
function mount_component(component, target, anchor, customElement) {
    const { fragment, on_mount, on_destroy, after_update } = component.$$;
    fragment && fragment.m(target, anchor);
    if (!customElement) {
        // onMount happens before the initial afterUpdate
        add_render_callback(() => {
            const new_on_destroy = on_mount.map(run).filter(is_function);
            if (on_destroy) {
                on_destroy.push(...new_on_destroy);
            }
            else {
                // Edge case - component was destroyed immediately,
                // most likely as a result of a binding initialising
                run_all(new_on_destroy);
            }
            component.$$.on_mount = [];
        });
    }
    after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
    const $$ = component.$$;
    if ($$.fragment !== null) {
        run_all($$.on_destroy);
        $$.fragment && $$.fragment.d(detaching);
        // TODO null out other refs, including component.$$ (but need to
        // preserve final state?)
        $$.on_destroy = $$.fragment = null;
        $$.ctx = [];
    }
}
function make_dirty(component, i) {
    if (component.$$.dirty[0] === -1) {
        dirty_components.push(component);
        schedule_update();
        component.$$.dirty.fill(0);
    }
    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
}
function init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {
    const parent_component = current_component;
    set_current_component(component);
    const $$ = component.$$ = {
        fragment: null,
        ctx: null,
        // state
        props,
        update: noop,
        not_equal,
        bound: blank_object(),
        // lifecycle
        on_mount: [],
        on_destroy: [],
        on_disconnect: [],
        before_update: [],
        after_update: [],
        context: new Map(parent_component ? parent_component.$$.context : options.context || []),
        // everything else
        callbacks: blank_object(),
        dirty,
        skip_bound: false,
        root: options.target || parent_component.$$.root
    };
    append_styles && append_styles($$.root);
    let ready = false;
    $$.ctx = instance
        ? instance(component, options.props || {}, (i, ret, ...rest) => {
            const value = rest.length ? rest[0] : ret;
            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                if (!$$.skip_bound && $$.bound[i])
                    $$.bound[i](value);
                if (ready)
                    make_dirty(component, i);
            }
            return ret;
        })
        : [];
    $$.update();
    ready = true;
    run_all($$.before_update);
    // `false` as a special case of no DOM component
    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
    if (options.target) {
        if (options.hydrate) {
            const nodes = children(options.target);
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.l(nodes);
            nodes.forEach(detach);
        }
        else {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.c();
        }
        if (options.intro)
            transition_in(component.$$.fragment);
        mount_component(component, options.target, options.anchor, options.customElement);
        flush();
    }
    set_current_component(parent_component);
}
/**
 * Base class for Svelte components. Used when dev=false.
 */
class SvelteComponent {
    $destroy() {
        destroy_component(this, 1);
        this.$destroy = noop;
    }
    $on(type, callback) {
        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
        callbacks.push(callback);
        return () => {
            const index = callbacks.indexOf(callback);
            if (index !== -1)
                callbacks.splice(index, 1);
        };
    }
    $set($$props) {
        if (this.$$set && !is_empty($$props)) {
            this.$$.skip_bound = true;
            this.$$set($$props);
            this.$$.skip_bound = false;
        }
    }
}

function dispatch_dev(type, detail) {
    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.42.1' }, detail), true));
}
function append_dev(target, node) {
    dispatch_dev('SvelteDOMInsert', { target, node });
    append(target, node);
}
function insert_dev(target, node, anchor) {
    dispatch_dev('SvelteDOMInsert', { target, node, anchor });
    insert(target, node, anchor);
}
function detach_dev(node) {
    dispatch_dev('SvelteDOMRemove', { node });
    detach(node);
}
function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {
    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];
    if (has_prevent_default)
        modifiers.push('preventDefault');
    if (has_stop_propagation)
        modifiers.push('stopPropagation');
    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });
    const dispose = listen(node, event, handler, options);
    return () => {
        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });
        dispose();
    };
}
function attr_dev(node, attribute, value) {
    attr(node, attribute, value);
    if (value == null)
        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });
    else
        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });
}
function prop_dev(node, property, value) {
    node[property] = value;
    dispatch_dev('SvelteDOMSetProperty', { node, property, value });
}
function set_data_dev(text, data) {
    data = '' + data;
    if (text.wholeText === data)
        return;
    dispatch_dev('SvelteDOMSetData', { node: text, data });
    text.data = data;
}
function validate_each_argument(arg) {
    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {
        let msg = '{#each} only iterates over array-like objects.';
        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {
            msg += ' You can use a spread to convert this iterable into an array.';
        }
        throw new Error(msg);
    }
}
function validate_slots(name, slot, keys) {
    for (const slot_key of Object.keys(slot)) {
        if (!~keys.indexOf(slot_key)) {
            console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
        }
    }
}
/**
 * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.
 */
class SvelteComponentDev extends SvelteComponent {
    constructor(options) {
        if (!options || (!options.target && !options.$$inline)) {
            throw new Error("'target' is a required option");
        }
        super();
    }
    $destroy() {
        super.$destroy();
        this.$destroy = () => {
            console.warn('Component was already destroyed'); // eslint-disable-line no-console
        };
    }
    $capture_state() { }
    $inject_state() { }
}

/* src/svelte/NoLinkImage.svelte generated by Svelte v3.42.1 */

const file$6 = "src/svelte/NoLinkImage.svelte";

function add_css$6(target) {
	append_styles(target, "svelte-slw3mj", "div#broken-link-container.svelte-slw3mj{position:fixed;bottom:5%;width:100%;height:25%;max-height:200px;align-content:center}svg.svelte-slw3mj{display:block;width:100%;height:100%;opacity:60%;position:relative;margin-left:auto;margin-right:auto}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTm9MaW5rSW1hZ2Uuc3ZlbHRlIiwibWFwcGluZ3MiOiJBQTZHRSxHQUFHLHNCQUFzQixjQUFDLENBQUEsQUFDeEIsUUFBUSxDQUFFLEtBQUssQ0FDZixNQUFNLENBQUUsRUFBRSxDQUNWLEtBQUssQ0FBRSxJQUFJLENBQ1gsTUFBTSxDQUFFLEdBQUcsQ0FDWCxVQUFVLENBQUUsS0FBSyxDQUNqQixhQUFhLENBQUUsTUFBTSxBQUN2QixDQUFBLEFBQ0EsR0FBRyxjQUFDLENBQUEsQUFDRixPQUFPLENBQUUsS0FBSyxDQUNkLEtBQUssQ0FBRSxJQUFJLENBQ1gsTUFBTSxDQUFFLElBQUksQ0FDWixPQUFPLENBQUUsR0FBRyxDQUNaLFFBQVEsQ0FBRSxRQUFRLENBQ2xCLFdBQVcsQ0FBRSxJQUFJLENBQ2pCLFlBQVksQ0FBRSxJQUFJLEFBQ3BCLENBQUEiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiTm9MaW5rSW1hZ2Uuc3ZlbHRlIl19 */");
}

function create_fragment$6(ctx) {
	let div;
	let svg;
	let g;
	let path0;
	let path1;
	let path2;
	let path3;
	let path4;
	let path5;
	let path6;
	let path7;
	let path8;
	let path9;
	let path10;
	let path11;
	let path12;
	let path13;

	const block = {
		c: function create() {
			div = element("div");
			svg = svg_element("svg");
			g = svg_element("g");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			path3 = svg_element("path");
			path4 = svg_element("path");
			path5 = svg_element("path");
			path6 = svg_element("path");
			path7 = svg_element("path");
			path8 = svg_element("path");
			path9 = svg_element("path");
			path10 = svg_element("path");
			path11 = svg_element("path");
			path12 = svg_element("path");
			path13 = svg_element("path");
			set_style(path0, "fill", "#B3404A");
			attr_dev(path0, "d", "M383.112,223.342c-3.162,0-6.347-1.034-9.008-3.162c-6.227-4.981-7.238-14.067-2.257-20.294\n\t\tl23.098-28.877c4.982-6.226,14.067-7.238,20.294-2.257c6.227,4.981,7.238,14.067,2.257,20.294l-23.098,28.877\n\t\tC391.545,221.487,387.348,223.342,383.112,223.342z");
			add_location(path0, file$6, 14, 6, 355);
			set_style(path1, "fill", "#B3404A");
			attr_dev(path1, "d", "M435.095,270.439h-37.537c-7.973,0-14.438-6.465-14.438-14.438c0-7.973,6.465-14.438,14.438-14.438\n\t\th37.537c7.973,0,14.438,6.465,14.438,14.438C449.533,263.973,443.069,270.439,435.095,270.439z");
			add_location(path1, file$6, 20, 6, 667);
			set_style(path2, "fill", "#B3404A");
			attr_dev(path2, "d", "M406.229,346.41c-4.237,0-8.433-1.854-11.285-5.42l-23.098-28.877\n\t\tc-4.98-6.227-3.97-15.311,2.257-20.294c6.228-4.98,15.313-3.969,20.294,2.257l23.098,28.877c4.98,6.227,3.97,15.311-2.257,20.294\n\t\tC412.576,345.376,409.393,346.41,406.229,346.41z");
			add_location(path2, file$6, 25, 6, 920);
			set_style(path3, "fill", "#B3404A");
			attr_dev(path3, "d", "M128.887,223.342c-4.237,0-8.433-1.854-11.285-5.42l-23.098-28.877\n\t\tc-4.98-6.227-3.97-15.311,2.257-20.294c6.228-4.981,15.311-3.97,20.294,2.257l23.098,28.877c4.98,6.227,3.97,15.311-2.257,20.294\n\t\tC135.232,222.31,132.049,223.342,128.887,223.342z");
			add_location(path3, file$6, 31, 6, 1224);
			set_style(path4, "fill", "#B3404A");
			attr_dev(path4, "d", "M114.44,270.439H76.904c-7.973,0-14.438-6.465-14.438-14.438c0-7.973,6.465-14.438,14.438-14.438\n\t\th37.537c7.973,0,14.438,6.465,14.438,14.438C128.878,263.973,122.413,270.439,114.44,270.439z");
			add_location(path4, file$6, 37, 6, 1530);
			set_style(path5, "fill", "#B3404A");
			attr_dev(path5, "d", "M105.769,346.41c-3.162,0-6.347-1.034-9.008-3.162c-6.227-4.981-7.238-14.067-2.257-20.294\n\t\tl23.098-28.877c4.982-6.226,14.067-7.236,20.294-2.257c6.227,4.981,7.238,14.067,2.257,20.294l-23.098,28.877\n\t\tC114.202,344.553,110.004,346.41,105.769,346.41z");
			add_location(path5, file$6, 42, 6, 1780);
			set_style(path6, "fill", "#B3404A");
			attr_dev(path6, "d", "M471.123,176.32c-7.973,0-14.438-6.465-14.438-14.438v-53.826c0-29.082-23.661-52.741-52.741-52.741\n\t\th-24.949c-7.973,0-14.438-6.465-14.438-14.438s6.465-14.438,14.438-14.438h24.949c45.004,0,81.617,36.613,81.617,81.617v53.826\n\t\tC485.561,169.855,479.096,176.32,471.123,176.32z");
			add_location(path6, file$6, 48, 6, 2089);
			set_style(path7, "fill", "#B3404A");
			attr_dev(path7, "d", "M40.877,176.32c-7.973,0-14.438-6.465-14.438-14.438v-53.826c0-45.004,36.613-81.617,81.617-81.617\n\t\th24.948c7.973,0,14.438,6.465,14.438,14.438s-6.465,14.438-14.438,14.438h-24.948c-29.082,0-52.741,23.661-52.741,52.741v53.826\n\t\tC55.315,169.855,48.85,176.32,40.877,176.32z");
			add_location(path7, file$6, 54, 6, 2424);
			set_style(path8, "fill", "#B3404A");
			attr_dev(path8, "d", "M403.943,485.561h-24.948c-7.973,0-14.438-6.465-14.438-14.438c0-7.973,6.465-14.438,14.438-14.438\n\t\th24.948c29.082,0,52.741-23.661,52.741-52.741v-53.826c0-7.973,6.465-14.438,14.438-14.438c7.973,0,14.438,6.465,14.438,14.438\n\t\tv53.826C485.561,448.947,448.947,485.561,403.943,485.561z");
			add_location(path8, file$6, 60, 6, 2755);
			set_style(path9, "fill", "#B3404A");
			attr_dev(path9, "d", "M133.005,485.561h-24.948c-45.004,0-81.617-36.613-81.617-81.617v-53.826\n\t\tc0-7.973,6.465-14.438,14.438-14.438s14.438,6.465,14.438,14.438v53.826c0,29.082,23.661,52.741,52.741,52.741h24.948\n\t\tc7.973,0,14.438,6.465,14.438,14.438C147.442,479.096,140.979,485.561,133.005,485.561z");
			add_location(path9, file$6, 66, 6, 3098);
			add_location(g, file$6, 13, 4, 345);
			set_style(path10, "fill", "#EBAFAE");
			attr_dev(path10, "d", "M202.039,208.49c12.894,0,23.349-10.453,23.349-23.349V91.748c0-16.593,14.019-30.612,30.612-30.612\n\tc16.593,0,30.612,14.019,30.612,30.612v93.395c0,12.894,10.453,23.349,23.349,23.349l0,0c12.894,0,23.349-10.453,23.349-23.349\n\tV91.748c0-42.521-34.789-77.31-77.31-77.31l0,0c-42.521,0-77.31,34.789-77.31,77.31v93.395\n\tC178.69,198.037,189.143,208.49,202.039,208.49L202.039,208.49z");
			add_location(path10, file$6, 73, 4, 3442);
			set_style(path11, "fill", "#B1404A");
			attr_dev(path11, "d", "M309.961,222.928c-20.837,0-37.787-16.95-37.787-37.787V91.748c0-8.616-7.558-16.175-16.175-16.175\n\tc-8.616,0-16.175,7.558-16.175,16.175v93.395c0,20.837-16.95,37.787-37.787,37.787s-37.787-16.95-37.787-37.787V91.748\n\tC164.252,41.158,205.409,0,256,0s91.748,41.158,91.748,91.748v93.395C347.746,205.978,330.796,222.928,309.961,222.928z M256,46.698\n\tc24.42,0,45.05,20.63,45.05,45.05v93.395c0,4.913,3.998,8.911,8.911,8.911s8.911-3.998,8.911-8.911V91.748\n\tc0-34.668-28.204-62.872-62.872-62.872c-34.668,0-62.872,28.204-62.872,62.872v93.395c0,4.913,3.998,8.911,8.911,8.911\n\ts8.911-3.998,8.911-8.911V91.748C210.948,67.328,231.578,46.698,256,46.698z");
			add_location(path11, file$6, 80, 4, 3870);
			set_style(path12, "fill", "#EBAFAE");
			attr_dev(path12, "d", "M309.96,303.51c-12.894,0-23.349,10.453-23.349,23.349v93.395c0,16.593-14.019,30.612-30.612,30.612\n\tc-16.593,0-30.612-14.019-30.612-30.612v-93.395c0-12.894-10.453-23.349-23.349-23.349l0,0c-12.894,0-23.349,10.453-23.349,23.349\n\tv93.395c0,42.521,34.789,77.31,77.31,77.31l0,0c42.521,0,77.31-34.789,77.31-77.31v-93.395\n\tC333.309,313.963,322.856,303.51,309.96,303.51L309.96,303.51z");
			add_location(path12, file$6, 89, 4, 4561);
			set_style(path13, "fill", "#B1404A");
			attr_dev(path13, "d", "M256,512c-50.59,0-91.748-41.158-91.748-91.748v-93.395c0-20.837,16.95-37.787,37.787-37.787\n\ts37.787,16.95,37.787,37.787v93.395c0,8.616,7.558,16.175,16.175,16.175c8.616,0,16.175-7.558,16.175-16.175v-93.395\n\tc0-20.837,16.95-37.787,37.787-37.787s37.787,16.95,37.787,37.787v93.395C347.746,470.842,306.59,512,256,512z M202.039,317.947\n\tc-4.913,0-8.911,3.998-8.911,8.911v93.395c0,34.668,28.204,62.872,62.872,62.872c34.668,0,62.872-28.204,62.872-62.872v-93.395\n\tc0-4.913-3.998-8.911-8.911-8.911s-8.911,3.998-8.911,8.911v93.395c0,24.42-20.63,45.05-45.05,45.05s-45.05-20.63-45.05-45.05\n\tv-93.395C210.948,321.944,206.952,317.947,202.039,317.947z");
			add_location(path13, file$6, 96, 4, 4991);
			attr_dev(svg, "version", "1.1");
			attr_dev(svg, "id", "Layer_1");
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "xmlns:xlink", "http://www.w3.org/1999/xlink");
			attr_dev(svg, "x", "0px");
			attr_dev(svg, "y", "0px");
			attr_dev(svg, "viewBox", "0 0 512 512");
			set_style(svg, "enable-background", "new 0 0 512 512");
			attr_dev(svg, "xml:space", "preserve");
			attr_dev(svg, "class", "svelte-slw3mj");
			add_location(svg, file$6, 2, 2, 89);
			attr_dev(div, "id", "broken-link-container");
			attr_dev(div, "class", "svelte-slw3mj");
			add_location(div, file$6, 0, 0, 0);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, svg);
			append_dev(svg, g);
			append_dev(g, path0);
			append_dev(g, path1);
			append_dev(g, path2);
			append_dev(g, path3);
			append_dev(g, path4);
			append_dev(g, path5);
			append_dev(g, path6);
			append_dev(g, path7);
			append_dev(g, path8);
			append_dev(g, path9);
			append_dev(svg, path10);
			append_dev(svg, path11);
			append_dev(svg, path12);
			append_dev(svg, path13);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$6.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$6($$self, $$props) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('NoLinkImage', slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<NoLinkImage> was created with unknown prop '${key}'`);
	});

	return [];
}

class NoLinkImage extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$6, create_fragment$6, safe_not_equal, {}, add_css$6);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "NoLinkImage",
			options,
			id: create_fragment$6.name
		});
	}
}

/* src/svelte/Descendants.svelte generated by Svelte v3.42.1 */

const { console: console_1 } = globals;
const file$5 = "src/svelte/Descendants.svelte";

function add_css$5(target) {
	append_styles(target, "svelte-1anwmr5", "a.link.svelte-1anwmr5.svelte-1anwmr5{cursor:pointer}ul.svelte-1anwmr5.svelte-1anwmr5{list-style:none;margin:0;padding:0}li.svelte-1anwmr5.svelte-1anwmr5{list-style:none;margin:0;padding:0}ul.svelte-1anwmr5.svelte-1anwmr5{padding-left:1em}li.svelte-1anwmr5.svelte-1anwmr5{padding-left:1em;border:5px solid darkgray;border-width:0 0 1px 1px}li.dark-mode.svelte-1anwmr5.svelte-1anwmr5{padding-left:1em;border:5px solid gray;border-width:0 0 1px 1px}li.container.svelte-1anwmr5.svelte-1anwmr5{border-bottom:0px}li.svelte-1anwmr5 p.svelte-1anwmr5{margin:0;position:relative;top:0em;padding:1px 0 1px 0}li.svelte-1anwmr5 ul.svelte-1anwmr5{border-top:1px solid darkgray;margin-left:-1em;padding-left:2em}li.dark-mode.svelte-1anwmr5 ul.svelte-1anwmr5{border-top:1px solid gray}ul li.svelte-1anwmr5:last-child ul.svelte-1anwmr5{border-left:none;margin-left:-17px}.expand-arrow.svelte-1anwmr5.svelte-1anwmr5{color:darkgrey}.expand-arrow.svelte-1anwmr5.svelte-1anwmr5:hover{color:gray}div.expand_button.svelte-1anwmr5.svelte-1anwmr5{display:inline}div.expand_button.svelte-1anwmr5 svg.svg.svelte-1anwmr5{width:14px;height:14px;margin-top:5px}li.light-mode.svelte-1anwmr5 div.expand_button svg.svg.svelte-1anwmr5{fill:darkgrey}li.light-mode.svelte-1anwmr5 div.expand_button svg.svg.svelte-1anwmr5:hover{fill:gray}li.dark-mode.svelte-1anwmr5 div.expand_button svg.svg.svelte-1anwmr5{fill:gray}li.dark-mode.svelte-1anwmr5 div.expand_button svg.svg.svelte-1anwmr5:hover{fill:lightgray}div.expand_button.svelte-1anwmr5 svg.svg.expanded.svelte-1anwmr5{transform:rotate(90deg)}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGVzY2VuZGFudHMuc3ZlbHRlIiwibWFwcGluZ3MiOiJBQTRHRSxDQUFDLEtBQUssOEJBQUMsQ0FBQSxBQUNMLE1BQU0sQ0FBRSxPQUFPLEFBQ2pCLENBQUEsQUFFQSxFQUFFLDhCQUFDLENBQUEsQUFDRCxVQUFVLENBQUUsSUFBSSxDQUNoQixNQUFNLENBQUUsQ0FBQyxDQUNULE9BQU8sQ0FBRSxDQUFDLEFBQ1osQ0FBQSxBQUVBLEVBQUUsOEJBQUMsQ0FBQSxBQUNELFVBQVUsQ0FBRSxJQUFJLENBQ2hCLE1BQU0sQ0FBRSxDQUFDLENBQ1QsT0FBTyxDQUFFLENBQUMsQUFDWixDQUFBLEFBRUEsRUFBRSw4QkFBQyxDQUFBLEFBQ0QsWUFBWSxDQUFFLEdBQUcsQUFDbkIsQ0FBQSxBQUVBLEVBQUUsOEJBQUMsQ0FBQSxBQUNELFlBQVksQ0FBRSxHQUFHLENBQ2pCLE1BQU0sQ0FBRSxHQUFHLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FDMUIsWUFBWSxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQUFDM0IsQ0FBQSxBQUNBLEVBQUUsVUFBVSw4QkFBQyxDQUFBLEFBQ1gsWUFBWSxDQUFFLEdBQUcsQ0FDakIsTUFBTSxDQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUN0QixZQUFZLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxBQUMzQixDQUFBLEFBQ0EsRUFBRSxVQUFVLDhCQUFDLENBQUEsQUFDWCxhQUFhLENBQUUsR0FBRyxBQUNwQixDQUFBLEFBRUEsaUJBQUUsQ0FBQyxDQUFDLGVBQUMsQ0FBQSxBQUNILE1BQU0sQ0FBRSxDQUFDLENBQ1QsUUFBUSxDQUFFLFFBQVEsQ0FDbEIsR0FBRyxDQUFFLEdBQUcsQ0FDUixPQUFPLENBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxBQUN0QixDQUFBLEFBRUEsaUJBQUUsQ0FBQyxFQUFFLGVBQUMsQ0FBQSxBQUNKLFVBQVUsQ0FBRSxHQUFHLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FDOUIsV0FBVyxDQUFFLElBQUksQ0FDakIsWUFBWSxDQUFFLEdBQUcsQUFDbkIsQ0FBQSxBQUVBLEVBQUUseUJBQVUsQ0FBQyxFQUFFLGVBQUMsQ0FBQSxBQUNkLFVBQVUsQ0FBRSxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQUFDNUIsQ0FBQSxBQUVBLEVBQUUsQ0FBQyxpQkFBRSxXQUFXLENBQUMsRUFBRSxlQUFDLENBQUEsQUFDbEIsV0FBVyxDQUFFLElBQUksQ0FDakIsV0FBVyxDQUFFLEtBQUssQUFDcEIsQ0FBQSxBQUVBLGFBQWEsOEJBQUMsQ0FBQSxBQUNaLEtBQUssQ0FBRSxRQUFRLEFBQ2pCLENBQUEsQUFFQSwyQ0FBYSxNQUFNLEFBQUMsQ0FBQSxBQUNsQixLQUFLLENBQUUsSUFBSSxBQUNiLENBQUEsQUFFQSxHQUFHLGNBQWMsOEJBQUMsQ0FBQSxBQUNoQixPQUFPLENBQUUsTUFBTSxBQUNqQixDQUFBLEFBRUEsR0FBRyw2QkFBYyxDQUFDLEdBQUcsSUFBSSxlQUFDLENBQUEsQUFDeEIsS0FBSyxDQUFFLElBQUksQ0FDWCxNQUFNLENBQUUsSUFBSSxDQUNaLFVBQVUsQ0FBRSxHQUFHLEFBQ2pCLENBQUEsQUFFQSxFQUFFLDBCQUFXLENBQUMsR0FBRyxjQUFjLENBQUMsR0FBRyxJQUFJLGVBQUMsQ0FBQSxBQUN0QyxJQUFJLENBQUUsUUFBUSxBQUNoQixDQUFBLEFBQ0EsRUFBRSwwQkFBVyxDQUFDLEdBQUcsY0FBYyxDQUFDLEdBQUcsbUJBQUksTUFBTSxBQUFDLENBQUEsQUFDNUMsSUFBSSxDQUFFLElBQUksQUFDWixDQUFBLEFBRUEsRUFBRSx5QkFBVSxDQUFDLEdBQUcsY0FBYyxDQUFDLEdBQUcsSUFBSSxlQUFDLENBQUEsQUFDckMsSUFBSSxDQUFFLElBQUksQUFDWixDQUFBLEFBQ0EsRUFBRSx5QkFBVSxDQUFDLEdBQUcsY0FBYyxDQUFDLEdBQUcsbUJBQUksTUFBTSxBQUFDLENBQUEsQUFDM0MsSUFBSSxDQUFFLFNBQVMsQUFDakIsQ0FBQSxBQUVBLEdBQUcsNkJBQWMsQ0FBQyxHQUFHLElBQUksU0FBUyxlQUFDLENBQUEsQUFDakMsU0FBUyxDQUFFLE9BQU8sS0FBSyxDQUFDLEFBQzFCLENBQUEiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiRGVzY2VuZGFudHMuc3ZlbHRlIl19 */");
}

function get_each_context$4(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[12] = list[i];
	return child_ctx;
}

// (47:0) {:else}
function create_else_block$1(ctx) {
	let li;
	let p;
	let t;
	let ul;
	let current;

	function select_block_type_1(ctx, dirty) {
		if (/*indentation*/ ctx[2] == 0) return create_if_block_2$1;
		return create_else_block_1$1;
	}

	let current_block_type = select_block_type_1(ctx);
	let if_block0 = current_block_type(ctx);
	let if_block1 = /*children*/ ctx[7].length > 0 && /*expanded*/ ctx[6] && create_if_block_1$1(ctx);

	const block = {
		c: function create() {
			li = element("li");
			p = element("p");
			if_block0.c();
			t = space();
			ul = element("ul");
			if (if_block1) if_block1.c();
			attr_dev(p, "class", "svelte-1anwmr5");
			add_location(p, file$5, 48, 4, 1194);
			attr_dev(ul, "class", "svelte-1anwmr5");
			add_location(ul, file$5, 85, 4, 2314);
			attr_dev(li, "class", "container " + /*dark_mode*/ ctx[8] + " svelte-1anwmr5");
			add_location(li, file$5, 47, 2, 1155);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, p);
			if_block0.m(p, null);
			append_dev(li, t);
			append_dev(li, ul);
			if (if_block1) if_block1.m(ul, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block0) {
				if_block0.p(ctx, dirty);
			} else {
				if_block0.d(1);
				if_block0 = current_block_type(ctx);

				if (if_block0) {
					if_block0.c();
					if_block0.m(p, null);
				}
			}

			if (/*children*/ ctx[7].length > 0 && /*expanded*/ ctx[6]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*children, expanded*/ 192) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_1$1(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(ul, null);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block1);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block1);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
			if_block0.d();
			if (if_block1) if_block1.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$1.name,
		type: "else",
		source: "(47:0) {:else}",
		ctx
	});

	return block;
}

// (45:0) {#if indentation == 0 && children.length == 0}
function create_if_block$1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("No descendants");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$1.name,
		type: "if",
		source: "(45:0) {#if indentation == 0 && children.length == 0}",
		ctx
	});

	return block;
}

// (52:6) {:else}
function create_else_block_1$1(ctx) {
	let t0;
	let a;
	let t1_value = GetDisplayName(/*note_path*/ ctx[0], /*db*/ ctx[1]) + "";
	let t1;
	let mounted;
	let dispose;
	let if_block = /*children*/ ctx[7].length > 0 && create_if_block_3$1(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			t0 = space();
			a = element("a");
			t1 = text(t1_value);
			attr_dev(a, "class", "link svelte-1anwmr5");
			attr_dev(a, "title", /*note_path*/ ctx[0]);
			add_location(a, file$5, 74, 8, 2073);
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, a, anchor);
			append_dev(a, t1);

			if (!mounted) {
				dispose = listen_dev(a, "click", /*click_handler_1*/ ctx[10], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (/*children*/ ctx[7].length > 0) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_3$1(ctx);
					if_block.c();
					if_block.m(t0.parentNode, t0);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*note_path, db*/ 3 && t1_value !== (t1_value = GetDisplayName(/*note_path*/ ctx[0], /*db*/ ctx[1]) + "")) set_data_dev(t1, t1_value);

			if (dirty & /*note_path*/ 1) {
				attr_dev(a, "title", /*note_path*/ ctx[0]);
			}
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(a);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_1$1.name,
		type: "else",
		source: "(52:6) {:else}",
		ctx
	});

	return block;
}

// (50:6) {#if indentation == 0}
function create_if_block_2$1(ctx) {
	let t_value = GetDisplayName(/*note_path*/ ctx[0], /*db*/ ctx[1]) + "";
	let t;

	const block = {
		c: function create() {
			t = text(t_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*note_path, db*/ 3 && t_value !== (t_value = GetDisplayName(/*note_path*/ ctx[0], /*db*/ ctx[1]) + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2$1.name,
		type: "if",
		source: "(50:6) {#if indentation == 0}",
		ctx
	});

	return block;
}

// (52:13) {#if children.length > 0}
function create_if_block_3$1(ctx) {
	let span;
	let div;
	let mounted;
	let dispose;

	function select_block_type_2(ctx, dirty) {
		if (/*expanded*/ ctx[6]) return create_if_block_4$1;
		return create_else_block_2$1;
	}

	let current_block_type = select_block_type_2(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			span = element("span");
			div = element("div");
			if_block.c();
			attr_dev(div, "class", "expand_button svelte-1anwmr5");
			add_location(div, file$5, 63, 13, 1716);
			attr_dev(span, "class", "expand-arrow svelte-1anwmr5");
			add_location(span, file$5, 52, 10, 1316);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, div);
			if_block.m(div, null);

			if (!mounted) {
				dispose = listen_dev(span, "click", /*click_handler*/ ctx[9], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (current_block_type !== (current_block_type = select_block_type_2(ctx))) {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(div, null);
				}
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
			if_block.d();
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3$1.name,
		type: "if",
		source: "(52:13) {#if children.length > 0}",
		ctx
	});

	return block;
}

// (69:14) {:else}
function create_else_block_2$1(ctx) {
	let svg;
	let use;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			use = svg_element("use");
			attr_dev(use, "href", "#expand-arrow-svg");
			add_location(use, file$5, 69, 18, 1947);
			attr_dev(svg, "class", "svg svelte-1anwmr5");
			add_location(svg, file$5, 68, 21, 1911);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, use);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_2$1.name,
		type: "else",
		source: "(69:14) {:else}",
		ctx
	});

	return block;
}

// (65:14) {#if expanded}
function create_if_block_4$1(ctx) {
	let svg;
	let use;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			use = svg_element("use");
			attr_dev(use, "href", "#expand-arrow-svg");
			add_location(use, file$5, 66, 18, 1834);
			attr_dev(svg, "class", "svg expanded svelte-1anwmr5");
			add_location(svg, file$5, 65, 16, 1789);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, use);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4$1.name,
		type: "if",
		source: "(65:14) {#if expanded}",
		ctx
	});

	return block;
}

// (87:6) {#if children.length > 0 && expanded}
function create_if_block_1$1(ctx) {
	let each_1_anchor;
	let current;
	let each_value = /*children*/ ctx[7];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$4(get_each_context$4(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty & /*db, app, children, indentation, view, expandMan*/ 190) {
				each_value = /*children*/ ctx[7];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$4(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block$4(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$1.name,
		type: "if",
		source: "(87:6) {#if children.length > 0 && expanded}",
		ctx
	});

	return block;
}

// (88:8) {#each children as child}
function create_each_block$4(ctx) {
	let descendants;
	let current;

	descendants = new Descendants({
			props: {
				db: /*db*/ ctx[1],
				app: /*app*/ ctx[4],
				note_path: /*child*/ ctx[12],
				indentation: /*indentation*/ ctx[2] + 1,
				view: /*view*/ ctx[3],
				expandMan: /*expandMan*/ ctx[5]
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(descendants.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(descendants, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const descendants_changes = {};
			if (dirty & /*db*/ 2) descendants_changes.db = /*db*/ ctx[1];
			if (dirty & /*app*/ 16) descendants_changes.app = /*app*/ ctx[4];
			if (dirty & /*children*/ 128) descendants_changes.note_path = /*child*/ ctx[12];
			if (dirty & /*indentation*/ 4) descendants_changes.indentation = /*indentation*/ ctx[2] + 1;
			if (dirty & /*view*/ 8) descendants_changes.view = /*view*/ ctx[3];
			if (dirty & /*expandMan*/ 32) descendants_changes.expandMan = /*expandMan*/ ctx[5];
			descendants.$set(descendants_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(descendants.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(descendants.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(descendants, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$4.name,
		type: "each",
		source: "(88:8) {#each children as child}",
		ctx
	});

	return block;
}

function create_fragment$5(ctx) {
	let svg;
	let symbol;
	let path;
	let t;
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$1, create_else_block$1];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*indentation*/ ctx[2] == 0 && /*children*/ ctx[7].length == 0) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			svg = svg_element("svg");
			symbol = svg_element("symbol");
			path = svg_element("path");
			t = space();
			if_block.c();
			if_block_anchor = empty();
			attr_dev(path, "d", "M22 12l-20 12 5-12-5-12z");
			add_location(path, file$5, 40, 5, 994);
			attr_dev(symbol, "id", "expand-arrow-svg");
			attr_dev(symbol, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(symbol, "viewBox", "0 0 24 24");
			add_location(symbol, file$5, 36, 2, 892);
			attr_dev(svg, "display", "none");
			add_location(svg, file$5, 35, 0, 869);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, symbol);
			append_dev(symbol, path);
			insert_dev(target, t, anchor);
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
			if (detaching) detach_dev(t);
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$5.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$5($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Descendants', slots, []);
	
	
	
	let { note_path } = $$props;
	let { db } = $$props;
	let { indentation } = $$props;
	let { view } = $$props;
	let { app } = $$props;
	let { expandMan } = $$props;
	expandMan.logIndent(indentation);

	let dark_mode = document.body.classList.contains("theme-dark")
	? "dark-mode"
	: "light-mode";

	let expanded;
	let children = [];

	if (db.descendants.has(note_path)) {
		children = db.descendants.get(note_path).slice();
	}

	function resetExpanded(new_max_indent) {
		if (indentation == 0) {
			$$invalidate(6, expanded = true);
		} else if (!view.plugin.settings.isExpanded(note_path)) {
			$$invalidate(6, expanded = false);
		} else {
			$$invalidate(6, expanded = indentation < new_max_indent );
		}
	}

	resetExpanded(expandMan.initial_max_indent);
	expandMan.registerRedrawDescendantCallback(resetExpanded);
	const writable_props = ['note_path', 'db', 'indentation', 'view', 'app', 'expandMan'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1.warn(`<Descendants> was created with unknown prop '${key}'`);
	});

	const click_handler = () => {
		$$invalidate(6, expanded = !expanded);
		console.log("known path: ", note_path);
		view.plugin.settings.setExpanded(note_path, expanded);

		if (expanded) {
			expandMan.onManualExpand();
			expandMan.logIndent(indentation + 1);
		}
	};

	const click_handler_1 = event => {
		NavigateToFile(app, note_path, event);
	};

	$$self.$$set = $$props => {
		if ('note_path' in $$props) $$invalidate(0, note_path = $$props.note_path);
		if ('db' in $$props) $$invalidate(1, db = $$props.db);
		if ('indentation' in $$props) $$invalidate(2, indentation = $$props.indentation);
		if ('view' in $$props) $$invalidate(3, view = $$props.view);
		if ('app' in $$props) $$invalidate(4, app = $$props.app);
		if ('expandMan' in $$props) $$invalidate(5, expandMan = $$props.expandMan);
	};

	$$self.$capture_state = () => ({
		GetDisplayName,
		NavigateToFile,
		note_path,
		db,
		indentation,
		view,
		app,
		expandMan,
		dark_mode,
		expanded,
		children,
		resetExpanded
	});

	$$self.$inject_state = $$props => {
		if ('note_path' in $$props) $$invalidate(0, note_path = $$props.note_path);
		if ('db' in $$props) $$invalidate(1, db = $$props.db);
		if ('indentation' in $$props) $$invalidate(2, indentation = $$props.indentation);
		if ('view' in $$props) $$invalidate(3, view = $$props.view);
		if ('app' in $$props) $$invalidate(4, app = $$props.app);
		if ('expandMan' in $$props) $$invalidate(5, expandMan = $$props.expandMan);
		if ('dark_mode' in $$props) $$invalidate(8, dark_mode = $$props.dark_mode);
		if ('expanded' in $$props) $$invalidate(6, expanded = $$props.expanded);
		if ('children' in $$props) $$invalidate(7, children = $$props.children);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		note_path,
		db,
		indentation,
		view,
		app,
		expandMan,
		expanded,
		children,
		dark_mode,
		click_handler,
		click_handler_1
	];
}

class Descendants extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(
			this,
			options,
			instance$5,
			create_fragment$5,
			safe_not_equal,
			{
				note_path: 0,
				db: 1,
				indentation: 2,
				view: 3,
				app: 4,
				expandMan: 5
			},
			add_css$5
		);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Descendants",
			options,
			id: create_fragment$5.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*note_path*/ ctx[0] === undefined && !('note_path' in props)) {
			console_1.warn("<Descendants> was created without expected prop 'note_path'");
		}

		if (/*db*/ ctx[1] === undefined && !('db' in props)) {
			console_1.warn("<Descendants> was created without expected prop 'db'");
		}

		if (/*indentation*/ ctx[2] === undefined && !('indentation' in props)) {
			console_1.warn("<Descendants> was created without expected prop 'indentation'");
		}

		if (/*view*/ ctx[3] === undefined && !('view' in props)) {
			console_1.warn("<Descendants> was created without expected prop 'view'");
		}

		if (/*app*/ ctx[4] === undefined && !('app' in props)) {
			console_1.warn("<Descendants> was created without expected prop 'app'");
		}

		if (/*expandMan*/ ctx[5] === undefined && !('expandMan' in props)) {
			console_1.warn("<Descendants> was created without expected prop 'expandMan'");
		}
	}

	get note_path() {
		throw new Error("<Descendants>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set note_path(value) {
		throw new Error("<Descendants>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get db() {
		throw new Error("<Descendants>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set db(value) {
		throw new Error("<Descendants>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get indentation() {
		throw new Error("<Descendants>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set indentation(value) {
		throw new Error("<Descendants>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get view() {
		throw new Error("<Descendants>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set view(value) {
		throw new Error("<Descendants>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get app() {
		throw new Error("<Descendants>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set app(value) {
		throw new Error("<Descendants>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get expandMan() {
		throw new Error("<Descendants>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set expandMan(value) {
		throw new Error("<Descendants>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/svelte/UpdateNotice.svelte generated by Svelte v3.42.1 */
const file$4 = "src/svelte/UpdateNotice.svelte";

function add_css$4(target) {
	append_styles(target, "svelte-tmf5ld", "div#all-container.svelte-tmf5ld{display:flex;flex-direction:column;height:100%}div#main_moc_div.svelte-tmf5ld{padding:initial;width:initial;height:initial;position:initial;overflow:auto;flex:1}div#main_moc_div.dark-mode.svelte-tmf5ld{color:#dcddde}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVXBkYXRlTm90aWNlLnN2ZWx0ZSIsIm1hcHBpbmdzIjoiQUF3REUsR0FBRyxjQUFjLGNBQUMsQ0FBQSxBQUNoQixPQUFPLENBQUUsSUFBSSxDQUNiLGNBQWMsQ0FBRSxNQUFNLENBQ3RCLE1BQU0sQ0FBRSxJQUFJLEFBQ2QsQ0FBQSxBQUVBLEdBQUcsYUFBYSxjQUFDLENBQUEsQUFDZixPQUFPLENBQUUsT0FBTyxDQUNoQixLQUFLLENBQUUsT0FBTyxDQUNkLE1BQU0sQ0FBRSxPQUFPLENBQ2YsUUFBUSxDQUFFLE9BQU8sQ0FDakIsUUFBUSxDQUFFLElBQUksQ0FDZCxJQUFJLENBQUUsQ0FBQyxBQUNULENBQUEsQUFFQSxHQUFHLGFBQWEsVUFBVSxjQUFDLENBQUEsQUFDekIsS0FBSyxDQUFFLE9BQU8sQUFDaEIsQ0FBQSIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJVcGRhdGVOb3RpY2Uuc3ZlbHRlIl19 */");
}

function create_fragment$4(ctx) {
	let div1;
	let div0;
	let h3;
	let t1;
	let ul;
	let li0;
	let t3;
	let br0;
	let t4;
	let li1;
	let t6;
	let a0;
	let t8;
	let br1;
	let br2;
	let t9;
	let a1;
	let t11;
	let a2;
	let t13;
	let a3;
	let t15;
	let br3;
	let br4;
	let t16;
	let button;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			div1 = element("div");
			div0 = element("div");
			h3 = element("h3");
			h3.textContent = "This plugin has been updated";
			t1 = text("\n\n    The latest changes are:\n    ");
			ul = element("ul");
			li0 = element("li");
			li0.textContent = "Added a settings option to display the path from the Central Note\n        starting at the Central Note instead of the currently open one.";
			t3 = space();
			br0 = element("br");
			t4 = space();
			li1 = element("li");
			li1.textContent = "Fixed a bug where links using # or ^ to reference headings or blocks\n        weren't followed";
			t6 = text("\n    See ");
			a0 = element("a");
			a0.textContent = "here";
			t8 = text("\n    for a complete history of all changes.");
			br1 = element("br");
			br2 = element("br");
			t9 = text("\n    Thank you for using this plugin! You can donate to support it's development on\n    ");
			a1 = element("a");
			a1.textContent = "Patreon";
			t11 = text(",\n    ");
			a2 = element("a");
			a2.textContent = "Ko-Fi";
			t13 = text("\n    or\n    ");
			a3 = element("a");
			a3.textContent = "PayPal";
			t15 = text(".\n\n    ");
			br3 = element("br");
			br4 = element("br");
			t16 = space();
			button = element("button");
			button.textContent = "Close";
			set_style(h3, "text-align", "center");
			add_location(h3, file$4, 15, 4, 343);
			add_location(li0, file$4, 19, 6, 451);
			add_location(br0, file$4, 23, 6, 620);
			add_location(li1, file$4, 24, 6, 633);
			add_location(ul, file$4, 18, 4, 440);
			attr_dev(a0, "href", "https://github.com/Robin-Haupt-1/Obsidian-Map-of-Content/releases");
			add_location(a0, file$4, 29, 13, 775);
			add_location(br1, file$4, 34, 42, 925);
			add_location(br2, file$4, 34, 48, 931);
			attr_dev(a1, "href", "https://www.patreon.com/RobinHaupt");
			add_location(a1, file$4, 36, 4, 1025);
			attr_dev(a2, "href", "https://ko-fi.com/robinhaupt");
			add_location(a2, file$4, 37, 4, 1087);
			attr_dev(a3, "href", "https://www.paypal.com/paypalme/robinhaupt");
			add_location(a3, file$4, 39, 4, 1147);
			add_location(br3, file$4, 41, 4, 1217);
			add_location(br4, file$4, 41, 10, 1223);
			set_style(button, "display", "block");
			set_style(button, "margin", "auto");
			add_location(button, file$4, 42, 4, 1234);
			attr_dev(div0, "id", "main_moc_div");
			attr_dev(div0, "class", "" + (null_to_empty(/*dark_mode*/ ctx[2]) + " svelte-tmf5ld"));
			add_location(div0, file$4, 14, 2, 297);
			attr_dev(div1, "id", "all-container");
			attr_dev(div1, "class", "svelte-tmf5ld");
			add_location(div1, file$4, 13, 0, 270);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);
			append_dev(div0, h3);
			append_dev(div0, t1);
			append_dev(div0, ul);
			append_dev(ul, li0);
			append_dev(ul, t3);
			append_dev(ul, br0);
			append_dev(ul, t4);
			append_dev(ul, li1);
			append_dev(div0, t6);
			append_dev(div0, a0);
			append_dev(div0, t8);
			append_dev(div0, br1);
			append_dev(div0, br2);
			append_dev(div0, t9);
			append_dev(div0, a1);
			append_dev(div0, t11);
			append_dev(div0, a2);
			append_dev(div0, t13);
			append_dev(div0, a3);
			append_dev(div0, t15);
			append_dev(div0, br3);
			append_dev(div0, br4);
			append_dev(div0, t16);
			append_dev(div0, button);

			if (!mounted) {
				dispose = listen_dev(button, "click", /*click_handler*/ ctx[4], false, false, false);
				mounted = true;
			}
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$4.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$4($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('UpdateNotice', slots, []);
	
	
	
	let { view } = $$props;
	let { plugin } = $$props;
	let settings = plugin.settings;

	let dark_mode = document.body.classList.contains("theme-dark")
	? "dark-mode"
	: "light-mode";

	const writable_props = ['view', 'plugin'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<UpdateNotice> was created with unknown prop '${key}'`);
	});

	const click_handler = () => {
		settings.set({ do_show_update_notice: false });
		view.rerender();
	};

	$$self.$$set = $$props => {
		if ('view' in $$props) $$invalidate(0, view = $$props.view);
		if ('plugin' in $$props) $$invalidate(3, plugin = $$props.plugin);
	};

	$$self.$capture_state = () => ({
		Log,
		onMount,
		view,
		plugin,
		settings,
		dark_mode
	});

	$$self.$inject_state = $$props => {
		if ('view' in $$props) $$invalidate(0, view = $$props.view);
		if ('plugin' in $$props) $$invalidate(3, plugin = $$props.plugin);
		if ('settings' in $$props) $$invalidate(1, settings = $$props.settings);
		if ('dark_mode' in $$props) $$invalidate(2, dark_mode = $$props.dark_mode);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [view, settings, dark_mode, plugin, click_handler];
}

class UpdateNotice extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$4, create_fragment$4, safe_not_equal, { view: 0, plugin: 3 }, add_css$4);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "UpdateNotice",
			options,
			id: create_fragment$4.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*view*/ ctx[0] === undefined && !('view' in props)) {
			console.warn("<UpdateNotice> was created without expected prop 'view'");
		}

		if (/*plugin*/ ctx[3] === undefined && !('plugin' in props)) {
			console.warn("<UpdateNotice> was created without expected prop 'plugin'");
		}
	}

	get view() {
		throw new Error("<UpdateNotice>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set view(value) {
		throw new Error("<UpdateNotice>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get plugin() {
		throw new Error("<UpdateNotice>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set plugin(value) {
		throw new Error("<UpdateNotice>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

class expandManager {
    constructor() {
        this.initial_max_indent = 3;
        this.redrawCallbacks = [];
        this.manually_expanded = false;
    }
    expand() {
        if (this.manually_expanded) {
            this.rerenderDescendants(this.initial_max_indent);
            this.manually_expanded = false;
        }
        else {
            this.rerenderDescendants(this.initial_max_indent + 1);
        }
    }
    contract() {
        if (this.initial_max_indent > 1) {
            this.rerenderDescendants(this.initial_max_indent - 1);
            this.initial_max_indent -= 1;
        }
    }
    rerenderDescendants(new_max_indent) {
        for (let func of this.redrawCallbacks) {
            func(new_max_indent);
        }
    }
    registerRedrawDescendantCallback(redraw) {
        this.redrawCallbacks.push(redraw);
    }
    logIndent(indent) {
        if (indent > this.initial_max_indent) {
            this.initial_max_indent = indent;
        }
    }
    onManualExpand() {
        this.manually_expanded = true;
    }
}

/* src/svelte/View.svelte generated by Svelte v3.42.1 */
const file$3 = "src/svelte/View.svelte";

function add_css$3(target) {
	append_styles(target, "svelte-1swdn0o", "div#all-container.svelte-1swdn0o.svelte-1swdn0o{display:flex;flex-direction:column;height:100%}div#top-bar.svelte-1swdn0o.svelte-1swdn0o{min-height:30px;width:100%;display:grid;grid-template-columns:1fr 1fr 1fr;grid-gap:10px;margin-bottom:1em}div#top-bar.svelte-1swdn0o div#pin-file svg#pinned.svelte-1swdn0o{display:none}div#top-bar.svelte-1swdn0o div#pin-file.is-pinned svg#pinned.svelte-1swdn0o{display:block}div#top-bar.svelte-1swdn0o div#pin-file.is-pinned svg#not-pinned.svelte-1swdn0o{display:none}div#top-bar-flex.svelte-1swdn0o.svelte-1swdn0o{min-height:30px;display:flex;justify-content:center}div#top-bar.svelte-1swdn0o div.action.svelte-1swdn0o{height:20px;width:20px;margin:5px}div#top-bar.svelte-1swdn0o div.action svg.svelte-1swdn0o{height:20px;width:20px;fill:darkgrey}div#top-bar.svelte-1swdn0o div.action:hover svg.svelte-1swdn0o{fill:grey}div.dark-mode.svelte-1swdn0o div#top-bar div.action svg.svelte-1swdn0o{height:20px;width:20px;fill:grey}div.dark-mode.svelte-1swdn0o div#top-bar div.action:hover svg.svelte-1swdn0o{fill:darkgrey}div#main_moc_div.svelte-1swdn0o.svelte-1swdn0o{padding:initial;width:initial;height:initial;position:initial;overflow:auto;flex:1}div.dark-mode.svelte-1swdn0o.svelte-1swdn0o{color:#dcddde}div#scroll_up.svelte-1swdn0o.svelte-1swdn0o{justify-self:flex-end;display:none}div#scroll_up.svelte-1swdn0o.svelte-1swdn0o{cursor:pointer;color:darkgrey}div#scroll_up.svelte-1swdn0o svg.svelte-1swdn0o{transform:rotate(-90deg);height:20px}div.light-mode.svelte-1swdn0o div#scroll_up svg.svelte-1swdn0o{fill:darkgray}div.light-mode.svelte-1swdn0o div#scroll_up:hover svg.svelte-1swdn0o{fill:gray}div.dark-mode.svelte-1swdn0o div#scroll_up svg.svelte-1swdn0o{fill:gray}div.dark-mode.svelte-1swdn0o div#scroll_up:hover svg.svelte-1swdn0o{fill:darkgray}a.link.svelte-1swdn0o.svelte-1swdn0o{cursor:pointer}ul.svelte-1swdn0o.svelte-1swdn0o{padding-left:0}svg.path-arrow.svelte-1swdn0o.svelte-1swdn0o{margin-right:3px;margin-left:3px;display:inline;width:24px;height:0.7em}div.dark-mode.svelte-1swdn0o svg.path-arrow.svelte-1swdn0o{fill:lightgray}.errors.svelte-1swdn0o.svelte-1swdn0o{padding:10px;width:initial;height:initial;position:initial;overflow-y:initial;overflow-wrap:initial}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVmlldy5zdmVsdGUiLCJtYXBwaW5ncyI6IkFBMlFFLEdBQUcsY0FBYyw4QkFBQyxDQUFBLEFBQ2hCLE9BQU8sQ0FBRSxJQUFJLENBQ2IsY0FBYyxDQUFFLE1BQU0sQ0FDdEIsTUFBTSxDQUFFLElBQUksQUFDZCxDQUFBLEFBRUEsR0FBRyxRQUFRLDhCQUFDLENBQUEsQUFDVixVQUFVLENBQUUsSUFBSSxDQUNoQixLQUFLLENBQUUsSUFBSSxDQUNYLE9BQU8sQ0FBRSxJQUFJLENBQ2IscUJBQXFCLENBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQ2xDLFFBQVEsQ0FBRSxJQUFJLENBQ2QsYUFBYSxDQUFFLEdBQUcsQUFDcEIsQ0FBQSxBQUVBLEdBQUcsdUJBQVEsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxHQUFHLE9BQU8sZUFBQyxDQUFBLEFBQ2xDLE9BQU8sQ0FBRSxJQUFJLEFBQ2YsQ0FBQSxBQUNBLEdBQUcsdUJBQVEsQ0FBQyxHQUFHLFNBQVMsVUFBVSxDQUFDLEdBQUcsT0FBTyxlQUFDLENBQUEsQUFDNUMsT0FBTyxDQUFFLEtBQUssQUFDaEIsQ0FBQSxBQUVBLEdBQUcsdUJBQVEsQ0FBQyxHQUFHLFNBQVMsVUFBVSxDQUFDLEdBQUcsV0FBVyxlQUFDLENBQUEsQUFDaEQsT0FBTyxDQUFFLElBQUksQUFDZixDQUFBLEFBRUEsR0FBRyxhQUFhLDhCQUFDLENBQUEsQUFDZixVQUFVLENBQUUsSUFBSSxDQUNoQixPQUFPLENBQUUsSUFBSSxDQUNiLGVBQWUsQ0FBRSxNQUFNLEFBQ3pCLENBQUEsQUFDQSxHQUFHLHVCQUFRLENBQUMsR0FBRyxPQUFPLGVBQUMsQ0FBQSxBQUNyQixNQUFNLENBQUUsSUFBSSxDQUNaLEtBQUssQ0FBRSxJQUFJLENBQ1gsTUFBTSxDQUFFLEdBQUcsQUFDYixDQUFBLEFBQ0EsR0FBRyx1QkFBUSxDQUFDLEdBQUcsT0FBTyxDQUFDLEdBQUcsZUFBQyxDQUFBLEFBQ3pCLE1BQU0sQ0FBRSxJQUFJLENBQ1osS0FBSyxDQUFFLElBQUksQ0FDWCxJQUFJLENBQUUsUUFBUSxBQUNoQixDQUFBLEFBQ0EsR0FBRyx1QkFBUSxDQUFDLEdBQUcsT0FBTyxNQUFNLENBQUMsR0FBRyxlQUFDLENBQUEsQUFDL0IsSUFBSSxDQUFFLElBQUksQUFDWixDQUFBLEFBQ0EsR0FBRyx5QkFBVSxDQUFDLEdBQUcsUUFBUSxDQUFDLEdBQUcsT0FBTyxDQUFDLEdBQUcsZUFBQyxDQUFBLEFBQ3ZDLE1BQU0sQ0FBRSxJQUFJLENBQ1osS0FBSyxDQUFFLElBQUksQ0FDWCxJQUFJLENBQUUsSUFBSSxBQUNaLENBQUEsQUFDQSxHQUFHLHlCQUFVLENBQUMsR0FBRyxRQUFRLENBQUMsR0FBRyxPQUFPLE1BQU0sQ0FBQyxHQUFHLGVBQUMsQ0FBQSxBQUM3QyxJQUFJLENBQUUsUUFBUSxBQUNoQixDQUFBLEFBQ0EsR0FBRyxhQUFhLDhCQUFDLENBQUEsQUFDZixPQUFPLENBQUUsT0FBTyxDQUNoQixLQUFLLENBQUUsT0FBTyxDQUNkLE1BQU0sQ0FBRSxPQUFPLENBQ2YsUUFBUSxDQUFFLE9BQU8sQ0FDakIsUUFBUSxDQUFFLElBQUksQ0FDZCxJQUFJLENBQUUsQ0FBQyxBQUNULENBQUEsQUFFQSxHQUFHLFVBQVUsOEJBQUMsQ0FBQSxBQUNaLEtBQUssQ0FBRSxPQUFPLEFBQ2hCLENBQUEsQUFFQSxHQUFHLFVBQVUsOEJBQUMsQ0FBQSxBQUNaLFlBQVksQ0FBRSxRQUFRLENBQ3RCLE9BQU8sQ0FBRSxJQUFJLEFBQ2YsQ0FBQSxBQUVBLEdBQUcsVUFBVSw4QkFBQyxDQUFBLEFBQ1osTUFBTSxDQUFFLE9BQU8sQ0FDZixLQUFLLENBQUUsUUFBUSxBQUNqQixDQUFBLEFBRUEsR0FBRyx5QkFBVSxDQUFDLEdBQUcsZUFBQyxDQUFBLEFBQ2hCLFNBQVMsQ0FBRSxPQUFPLE1BQU0sQ0FBQyxDQUN6QixNQUFNLENBQUUsSUFBSSxBQUNkLENBQUEsQUFFQSxHQUFHLDBCQUFXLENBQUMsR0FBRyxVQUFVLENBQUMsR0FBRyxlQUFDLENBQUEsQUFDL0IsSUFBSSxDQUFFLFFBQVEsQUFDaEIsQ0FBQSxBQUNBLEdBQUcsMEJBQVcsQ0FBQyxHQUFHLFVBQVUsTUFBTSxDQUFDLEdBQUcsZUFBQyxDQUFBLEFBQ3JDLElBQUksQ0FBRSxJQUFJLEFBQ1osQ0FBQSxBQUVBLEdBQUcseUJBQVUsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxHQUFHLGVBQUMsQ0FBQSxBQUM5QixJQUFJLENBQUUsSUFBSSxBQUNaLENBQUEsQUFDQSxHQUFHLHlCQUFVLENBQUMsR0FBRyxVQUFVLE1BQU0sQ0FBQyxHQUFHLGVBQUMsQ0FBQSxBQUNwQyxJQUFJLENBQUUsUUFBUSxBQUNoQixDQUFBLEFBQ0EsQ0FBQyxLQUFLLDhCQUFDLENBQUEsQUFDTCxNQUFNLENBQUUsT0FBTyxBQUNqQixDQUFBLEFBQ0EsRUFBRSw4QkFBQyxDQUFBLEFBQ0QsWUFBWSxDQUFFLENBQUMsQUFDakIsQ0FBQSxBQUVBLEdBQUcsV0FBVyw4QkFBQyxDQUFBLEFBQ2IsWUFBWSxDQUFFLEdBQUcsQ0FDakIsV0FBVyxDQUFFLEdBQUcsQ0FDaEIsT0FBTyxDQUFFLE1BQU0sQ0FDZixLQUFLLENBQUUsSUFBSSxDQUNYLE1BQU0sQ0FBRSxLQUFLLEFBQ2YsQ0FBQSxBQUNBLEdBQUcseUJBQVUsQ0FBQyxHQUFHLFdBQVcsZUFBQyxDQUFBLEFBQzNCLElBQUksQ0FBRSxTQUFTLEFBQ2pCLENBQUEsQUFDQSxPQUFPLDhCQUFDLENBQUEsQUFDTixPQUFPLENBQUUsSUFBSSxDQUNiLEtBQUssQ0FBRSxPQUFPLENBQ2QsTUFBTSxDQUFFLE9BQU8sQ0FDZixRQUFRLENBQUUsT0FBTyxDQUNqQixVQUFVLENBQUUsT0FBTyxDQUNuQixhQUFhLENBQUUsT0FBTyxBQUN4QixDQUFBIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIlZpZXcuc3ZlbHRlIl19 */");
}

function get_each_context$3(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[25] = list[i];
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[28] = list[i];
	child_ctx[30] = i;
	return child_ctx;
}

function get_each_context_1$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[28] = list[i];
	child_ctx[30] = i;
	return child_ctx;
}

// (166:4) {:else}
function create_else_block(ctx) {
	let t0;
	let br;
	let t1;
	let ul;
	let descendants;
	let current;
	let each_value = /*paths*/ ctx[1];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$3(get_each_context$3(ctx, each_value, i));
	}

	descendants = new Descendants({
			props: {
				db: /*db*/ ctx[9],
				app: /*app*/ ctx[8],
				view: /*view*/ ctx[0],
				note_path: /*view*/ ctx[0].open_file_path,
				indentation: 0,
				expandMan: /*expandMan*/ ctx[11]
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t0 = space();
			br = element("br");
			t1 = space();
			ul = element("ul");
			create_component(descendants.$$.fragment);
			add_location(br, file$3, 247, 6, 9871);
			attr_dev(ul, "class", "svelte-1swdn0o");
			add_location(ul, file$3, 248, 6, 9884);
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, t0, anchor);
			insert_dev(target, br, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, ul, anchor);
			mount_component(descendants, ul, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*paths, db, app, settings*/ 4866) {
				each_value = /*paths*/ ctx[1];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$3(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$3(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(t0.parentNode, t0);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			const descendants_changes = {};
			if (dirty[0] & /*view*/ 1) descendants_changes.view = /*view*/ ctx[0];
			if (dirty[0] & /*view*/ 1) descendants_changes.note_path = /*view*/ ctx[0].open_file_path;
			descendants.$set(descendants_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(descendants.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(descendants.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(br);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(ul);
			destroy_component(descendants);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(166:4) {:else}",
		ctx
	});

	return block;
}

// (150:32) 
function create_if_block_2(ctx) {
	let t0;
	let a0;
	let t1_value = GetDisplayName(/*cn_path*/ ctx[10], /*db*/ ctx[9]) + "";
	let t1;
	let t2;
	let br0;
	let br1;
	let t3;
	let a1;
	let t5;
	let br2;
	let t6;
	let nolinkimage;
	let current;
	let mounted;
	let dispose;
	nolinkimage = new NoLinkImage({ $$inline: true });

	const block = {
		c: function create() {
			t0 = text("This file doesn't have any connections to ");
			a0 = element("a");
			t1 = text(t1_value);
			t2 = text(".");
			br0 = element("br");
			br1 = element("br");
			t3 = text(" Link it to a file that is part of your Map of Content. Then\n      ");
			a1 = element("a");
			a1.textContent = "update";
			t5 = text("\n      your Map of Content and watch it grow!");
			br2 = element("br");
			t6 = space();
			create_component(nolinkimage.$$.fragment);
			attr_dev(a0, "class", "link svelte-1swdn0o");
			attr_dev(a0, "title", /*cn_path*/ ctx[10]);
			add_location(a0, file$3, 150, 48, 5890);
			add_location(br0, file$3, 156, 8, 6061);
			add_location(br1, file$3, 156, 14, 6067);
			attr_dev(a1, "class", "link svelte-1swdn0o");
			add_location(a1, file$3, 157, 6, 6140);
			add_location(br2, file$3, 163, 44, 6286);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, a0, anchor);
			append_dev(a0, t1);
			insert_dev(target, t2, anchor);
			insert_dev(target, br0, anchor);
			insert_dev(target, br1, anchor);
			insert_dev(target, t3, anchor);
			insert_dev(target, a1, anchor);
			insert_dev(target, t5, anchor);
			insert_dev(target, br2, anchor);
			insert_dev(target, t6, anchor);
			mount_component(nolinkimage, target, anchor);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(a0, "click", /*click_handler_5*/ ctx[19], false, false, false),
					listen_dev(a1, "click", /*click_handler_6*/ ctx[20], false, false, false)
				];

				mounted = true;
			}
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(nolinkimage.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(nolinkimage.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(a0);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(br0);
			if (detaching) detach_dev(br1);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(a1);
			if (detaching) detach_dev(t5);
			if (detaching) detach_dev(br2);
			if (detaching) detach_dev(t6);
			destroy_component(nolinkimage, detaching);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(150:32) ",
		ctx
	});

	return block;
}

// (146:28) 
function create_if_block_1(ctx) {
	let div;
	let raw_value = /*errors*/ ctx[2][0] + "";

	const block = {
		c: function create() {
			div = element("div");
			attr_dev(div, "class", "errors svelte-1swdn0o");
			add_location(div, file$3, 146, 6, 5749);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			div.innerHTML = raw_value;
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*errors*/ 4 && raw_value !== (raw_value = /*errors*/ ctx[2][0] + "")) div.innerHTML = raw_value;		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(146:28) ",
		ctx
	});

	return block;
}

// (144:4) {#if settings.get("do_show_update_notice")}
function create_if_block(ctx) {
	let updatenotice;
	let current;

	updatenotice = new UpdateNotice({
			props: {
				view: /*view*/ ctx[0],
				plugin: /*plugin*/ ctx[7]
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(updatenotice.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(updatenotice, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const updatenotice_changes = {};
			if (dirty[0] & /*view*/ 1) updatenotice_changes.view = /*view*/ ctx[0];
			updatenotice.$set(updatenotice_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(updatenotice.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(updatenotice.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(updatenotice, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(144:4) {#if settings.get(\\\"do_show_update_notice\\\")}",
		ctx
	});

	return block;
}

// (207:10) {:else}
function create_else_block_2(ctx) {
	let each_1_anchor;
	let each_value_2 = /*path*/ ctx[25].reverse();
	validate_each_argument(each_value_2);
	let each_blocks = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
	}

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*paths, db, app*/ 770) {
				each_value_2 = /*path*/ ctx[25].reverse();
				validate_each_argument(each_value_2);
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2(ctx, each_value_2, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_2(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_2.length;
			}
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_2.name,
		type: "else",
		source: "(207:10) {:else}",
		ctx
	});

	return block;
}

// (169:10) {#if settings.get("MOC_path_starts_at_CN")}
function create_if_block_3(ctx) {
	let each_1_anchor;
	let each_value_1 = /*path*/ ctx[25];
	validate_each_argument(each_value_1);
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1$1(get_each_context_1$1(ctx, each_value_1, i));
	}

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*paths, db, app*/ 770) {
				each_value_1 = /*path*/ ctx[25];
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1$1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1$1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3.name,
		type: "if",
		source: "(169:10) {#if settings.get(\\\"MOC_path_starts_at_CN\\\")}",
		ctx
	});

	return block;
}

// (211:17) {:else}
function create_else_block_3(ctx) {
	let a;
	let t_value = GetDisplayName(/*pathitem*/ ctx[28][0], /*db*/ ctx[9]) + "";
	let t;
	let a_title_value;
	let mounted;
	let dispose;

	function click_handler_8(...args) {
		return /*click_handler_8*/ ctx[22](/*pathitem*/ ctx[28], ...args);
	}

	const block = {
		c: function create() {
			a = element("a");
			t = text(t_value);
			attr_dev(a, "class", "link svelte-1swdn0o");
			attr_dev(a, "title", a_title_value = /*pathitem*/ ctx[28][0]);
			add_location(a, file$3, 210, 24, 8333);
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);
			append_dev(a, t);

			if (!mounted) {
				dispose = listen_dev(a, "click", click_handler_8, false, false, false);
				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty[0] & /*paths*/ 2 && t_value !== (t_value = GetDisplayName(/*pathitem*/ ctx[28][0], /*db*/ ctx[9]) + "")) set_data_dev(t, t_value);

			if (dirty[0] & /*paths*/ 2 && a_title_value !== (a_title_value = /*pathitem*/ ctx[28][0])) {
				attr_dev(a, "title", a_title_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_3.name,
		type: "else",
		source: "(211:17) {:else}",
		ctx
	});

	return block;
}

// (209:14) {#if i == 0}
function create_if_block_11(ctx) {
	let span;
	let t_value = GetDisplayName(/*pathitem*/ ctx[28][0], /*db*/ ctx[9]) + "";
	let t;
	let span_title_value;

	const block = {
		c: function create() {
			span = element("span");
			t = text(t_value);
			attr_dev(span, "title", span_title_value = /*pathitem*/ ctx[28][0]);
			add_location(span, file$3, 208, 26, 8224);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*paths*/ 2 && t_value !== (t_value = GetDisplayName(/*pathitem*/ ctx[28][0], /*db*/ ctx[9]) + "")) set_data_dev(t, t_value);

			if (dirty[0] & /*paths*/ 2 && span_title_value !== (span_title_value = /*pathitem*/ ctx[28][0])) {
				attr_dev(span, "title", span_title_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_11.name,
		type: "if",
		source: "(209:14) {#if i == 0}",
		ctx
	});

	return block;
}

// (233:59) 
function create_if_block_10(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "d", "M 9 0 L 0 7.5214844 L 9 15 L 9.6445312 14.236328 L 2.1152344 8 L 21.882812 8 L 14.355469 14.234375 L 15 15 L 24 7.4785156 L 15 0 L 14.355469 0.76367188 L 21.884766 7 L 2.1171875 7 L 9.6445312 0.765625 L 9 0 z ");
			add_location(path, file$3, 237, 18, 9495);
			attr_dev(svg, "class", "path-arrow svelte-1swdn0o");
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "viewBox", "0 0 24 15.05");
			add_location(svg, file$3, 232, 59, 9323);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_10.name,
		type: "if",
		source: "(233:59) ",
		ctx
	});

	return block;
}

// (225:57) 
function create_if_block_9(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "d", "M 2.117,7 9.644,0.765 9,0 0,7.521 9,15 9.645,14.236 2.116,8 H 24 V 7 Z");
			add_location(path, file$3, 229, 18, 9142);
			attr_dev(svg, "class", "path-arrow svelte-1swdn0o");
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "viewBox", "0 0 24 15.05");
			add_location(svg, file$3, 224, 57, 8970);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_9.name,
		type: "if",
		source: "(225:57) ",
		ctx
	});

	return block;
}

// (217:22) {#if pathitem[1] == LINKED_FROM}
function create_if_block_8(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "d", " M 21.883,8 14.356,14.235 15,15 24,7.479 15,0 14.355,0.764 21.884,7 H 0 v 1 z");
			add_location(path, file$3, 221, 18, 8784);
			attr_dev(svg, "class", "path-arrow svelte-1swdn0o");
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "viewBox", "0 0 24 15.05");
			add_location(svg, file$3, 216, 54, 8612);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_8.name,
		type: "if",
		source: "(217:22) {#if pathitem[1] == LINKED_FROM}",
		ctx
	});

	return block;
}

// (208:12) {#each path.reverse() as pathitem, i}
function create_each_block_2(ctx) {
	let if_block0_anchor;
	let if_block1_anchor;

	function select_block_type_4(ctx, dirty) {
		if (/*i*/ ctx[30] == 0) return create_if_block_11;
		return create_else_block_3;
	}

	let current_block_type = select_block_type_4(ctx);
	let if_block0 = current_block_type(ctx);

	function select_block_type_5(ctx, dirty) {
		if (/*pathitem*/ ctx[28][1] == LINKED_FROM) return create_if_block_8;
		if (/*pathitem*/ ctx[28][1] == LINKED_TO) return create_if_block_9;
		if (/*pathitem*/ ctx[28][1] == LINKED_BOTH) return create_if_block_10;
	}

	let current_block_type_1 = select_block_type_5(ctx);
	let if_block1 = current_block_type_1 && current_block_type_1(ctx);

	const block = {
		c: function create() {
			if_block0.c();
			if_block0_anchor = empty();
			if (if_block1) if_block1.c();
			if_block1_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_block0.m(target, anchor);
			insert_dev(target, if_block0_anchor, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert_dev(target, if_block1_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if_block0.p(ctx, dirty);

			if (current_block_type_1 !== (current_block_type_1 = select_block_type_5(ctx))) {
				if (if_block1) if_block1.d(1);
				if_block1 = current_block_type_1 && current_block_type_1(ctx);

				if (if_block1) {
					if_block1.c();
					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
				}
			}
		},
		d: function destroy(detaching) {
			if_block0.d(detaching);
			if (detaching) detach_dev(if_block0_anchor);

			if (if_block1) {
				if_block1.d(detaching);
			}

			if (detaching) detach_dev(if_block1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_2.name,
		type: "each",
		source: "(208:12) {#each path.reverse() as pathitem, i}",
		ctx
	});

	return block;
}

// (189:59) 
function create_if_block_7(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "d", "M 9 0 L 0 7.5214844 L 9 15 L 9.6445312 14.236328 L 2.1152344 8 L 21.882812 8 L 14.355469 14.234375 L 15 15 L 24 7.4785156 L 15 0 L 14.355469 0.76367188 L 21.884766 7 L 2.1171875 7 L 9.6445312 0.765625 L 9 0 z ");
			add_location(path, file$3, 194, 18, 7456);
			attr_dev(svg, "class", "path-arrow svelte-1swdn0o");
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "viewBox", "0 0 24 15.05");
			add_location(svg, file$3, 189, 16, 7284);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_7.name,
		type: "if",
		source: "(189:59) ",
		ctx
	});

	return block;
}

// (180:57) 
function create_if_block_6(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "d", " M 21.883,8 14.356,14.235 15,15 24,7.479 15,0 14.355,0.764 21.884,7 H 0 v 1 z");
			add_location(path, file$3, 185, 18, 7079);
			attr_dev(svg, "class", "path-arrow svelte-1swdn0o");
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "viewBox", "0 0 24 15.05");
			add_location(svg, file$3, 180, 16, 6907);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_6.name,
		type: "if",
		source: "(180:57) ",
		ctx
	});

	return block;
}

// (171:14) {#if pathitem[1] == LINKED_FROM}
function create_if_block_5(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "d", "M 2.117,7 9.644,0.765 9,0 0,7.521 9,15 9.645,14.236 2.116,8 H 24 V 7 Z");
			add_location(path, file$3, 176, 18, 6711);
			attr_dev(svg, "class", "path-arrow svelte-1swdn0o");
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "viewBox", "0 0 24 15.05");
			add_location(svg, file$3, 171, 16, 6539);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_5.name,
		type: "if",
		source: "(171:14) {#if pathitem[1] == LINKED_FROM}",
		ctx
	});

	return block;
}

// (200:17) {:else}
function create_else_block_1(ctx) {
	let a;
	let t_value = GetDisplayName(/*pathitem*/ ctx[28][0], /*db*/ ctx[9]) + "";
	let t;
	let a_title_value;
	let mounted;
	let dispose;

	function click_handler_7(...args) {
		return /*click_handler_7*/ ctx[21](/*pathitem*/ ctx[28], ...args);
	}

	const block = {
		c: function create() {
			a = element("a");
			t = text(t_value);
			attr_dev(a, "class", "link svelte-1swdn0o");
			attr_dev(a, "title", a_title_value = /*pathitem*/ ctx[28][0]);
			add_location(a, file$3, 199, 24, 7879);
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);
			append_dev(a, t);

			if (!mounted) {
				dispose = listen_dev(a, "click", click_handler_7, false, false, false);
				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty[0] & /*paths*/ 2 && t_value !== (t_value = GetDisplayName(/*pathitem*/ ctx[28][0], /*db*/ ctx[9]) + "")) set_data_dev(t, t_value);

			if (dirty[0] & /*paths*/ 2 && a_title_value !== (a_title_value = /*pathitem*/ ctx[28][0])) {
				attr_dev(a, "title", a_title_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_1.name,
		type: "else",
		source: "(200:17) {:else}",
		ctx
	});

	return block;
}

// (198:27) {#if i == path.length - 1}
function create_if_block_4(ctx) {
	let span;
	let t_value = GetDisplayName(/*pathitem*/ ctx[28][0], /*db*/ ctx[9]) + "";
	let t;
	let span_title_value;

	const block = {
		c: function create() {
			span = element("span");
			t = text(t_value);
			attr_dev(span, "title", span_title_value = /*pathitem*/ ctx[28][0]);
			add_location(span, file$3, 197, 53, 7770);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*paths*/ 2 && t_value !== (t_value = GetDisplayName(/*pathitem*/ ctx[28][0], /*db*/ ctx[9]) + "")) set_data_dev(t, t_value);

			if (dirty[0] & /*paths*/ 2 && span_title_value !== (span_title_value = /*pathitem*/ ctx[28][0])) {
				attr_dev(span, "title", span_title_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4.name,
		type: "if",
		source: "(198:27) {#if i == path.length - 1}",
		ctx
	});

	return block;
}

// (170:12) {#each path as pathitem, i}
function create_each_block_1$1(ctx) {
	let if_block0_anchor;
	let if_block1_anchor;

	function select_block_type_2(ctx, dirty) {
		if (/*pathitem*/ ctx[28][1] == LINKED_FROM) return create_if_block_5;
		if (/*pathitem*/ ctx[28][1] == LINKED_TO) return create_if_block_6;
		if (/*pathitem*/ ctx[28][1] == LINKED_BOTH) return create_if_block_7;
	}

	let current_block_type = select_block_type_2(ctx);
	let if_block0 = current_block_type && current_block_type(ctx);

	function select_block_type_3(ctx, dirty) {
		if (/*i*/ ctx[30] == /*path*/ ctx[25].length - 1) return create_if_block_4;
		return create_else_block_1;
	}

	let current_block_type_1 = select_block_type_3(ctx);
	let if_block1 = current_block_type_1(ctx);

	const block = {
		c: function create() {
			if (if_block0) if_block0.c();
			if_block0_anchor = empty();
			if_block1.c();
			if_block1_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert_dev(target, if_block0_anchor, anchor);
			if_block1.m(target, anchor);
			insert_dev(target, if_block1_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (current_block_type !== (current_block_type = select_block_type_2(ctx))) {
				if (if_block0) if_block0.d(1);
				if_block0 = current_block_type && current_block_type(ctx);

				if (if_block0) {
					if_block0.c();
					if_block0.m(if_block0_anchor.parentNode, if_block0_anchor);
				}
			}

			if (current_block_type_1 === (current_block_type_1 = select_block_type_3(ctx)) && if_block1) {
				if_block1.p(ctx, dirty);
			} else {
				if_block1.d(1);
				if_block1 = current_block_type_1(ctx);

				if (if_block1) {
					if_block1.c();
					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
				}
			}
		},
		d: function destroy(detaching) {
			if (if_block0) {
				if_block0.d(detaching);
			}

			if (detaching) detach_dev(if_block0_anchor);
			if_block1.d(detaching);
			if (detaching) detach_dev(if_block1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1$1.name,
		type: "each",
		source: "(170:12) {#each path as pathitem, i}",
		ctx
	});

	return block;
}

// (167:6) {#each paths as path}
function create_each_block$3(ctx) {
	let div;
	let t;
	let br;

	function select_block_type_1(ctx, dirty) {
		if (/*settings*/ ctx[12].get("MOC_path_starts_at_CN")) return create_if_block_3;
		return create_else_block_2;
	}

	let current_block_type = select_block_type_1(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			div = element("div");
			if_block.c();
			t = space();
			br = element("br");
			attr_dev(div, "class", "path");
			add_location(div, file$3, 167, 8, 6363);
			add_location(br, file$3, 244, 8, 9843);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			if_block.m(div, null);
			insert_dev(target, t, anchor);
			insert_dev(target, br, anchor);
		},
		p: function update(ctx, dirty) {
			if_block.p(ctx, dirty);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if_block.d();
			if (detaching) detach_dev(t);
			if (detaching) detach_dev(br);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$3.name,
		type: "each",
		source: "(167:6) {#each paths as path}",
		ctx
	});

	return block;
}

function create_fragment$3(ctx) {
	let div8;
	let div6;
	let div0;
	let svg0;
	let path0;
	let svg1;
	let path1;
	let div0_title_value;
	let t0;
	let div4;
	let div1;
	let svg2;
	let path2;
	let t1;
	let div2;
	let svg3;
	let path3;
	let t2;
	let div3;
	let svg4;
	let path4;
	let t3;
	let div5;
	let svg5;
	let path5;
	let t4;
	let div7;
	let show_if;
	let current_block_type_index;
	let if_block;
	let current;
	let mounted;
	let dispose;
	const if_block_creators = [create_if_block, create_if_block_1, create_if_block_2, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (show_if == null) show_if = !!/*settings*/ ctx[12].get("do_show_update_notice");
		if (show_if) return 0;
		if (/*errors*/ ctx[2].length) return 1;
		if (/*paths*/ ctx[1].length == 0) return 2;
		return 3;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			div8 = element("div");
			div6 = element("div");
			div0 = element("div");
			svg0 = svg_element("svg");
			path0 = svg_element("path");
			svg1 = svg_element("svg");
			path1 = svg_element("path");
			t0 = space();
			div4 = element("div");
			div1 = element("div");
			svg2 = svg_element("svg");
			path2 = svg_element("path");
			t1 = space();
			div2 = element("div");
			svg3 = svg_element("svg");
			path3 = svg_element("path");
			t2 = space();
			div3 = element("div");
			svg4 = svg_element("svg");
			path4 = svg_element("path");
			t3 = space();
			div5 = element("div");
			svg5 = svg_element("svg");
			path5 = svg_element("path");
			t4 = space();
			div7 = element("div");
			if_block.c();
			attr_dev(path0, "d", "M18 6c0 2.972-2.164 5.433-5 5.91v8.09h-2v-8.089c-2.836-.477-5-2.938-5-5.911 0-3.314 2.687-6 6-6s6 2.687 6 6zm-2 0c0-2.206-1.794-4-4-4s-4 1.794-4 4 1.794 4 4 4 4-1.794 4-4zm-5.618 2.098c2.339 1.84 5.563-.722 3.858-3.539.313 2.237-1.956 4.03-3.858 3.539zm4.618 8.195v2.052l.438.107c1.706.493 2.496 1.027 2.507 1.547-.011.52-.801 1.054-2.507 1.547-2.097.606-4.786.604-6.874.001-1.695-.489-2.515-1.021-2.515-1.547s.82-1.058 2.516-1.548l.436-.106v-2.052c-2.932.593-5.001 2.028-5.001 3.706 0 2.209 3.581 4 8 4s8-1.791 8-4c0-1.678-2.069-3.113-5-3.707z");
			add_location(path0, file$3, 49, 8, 1423);
			attr_dev(svg0, "id", "not-pinned");
			attr_dev(svg0, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg0, "viewBox", "0 0 24 24");
			attr_dev(svg0, "class", "svelte-1swdn0o");
			add_location(svg0, file$3, 44, 6, 1307);
			attr_dev(path1, "d", "M 12,2 C 8.687,2 6,4.687 6,8 c 0,2.972 2.164,5.433 5,5.91 V 20 h 2 v -6.089 c 2.836,-0.477 5,-2.938 5,-5.91 C 18,4.687 15.313,2 12,2 Z M 11.293,6.508 C 10.744,7.158 9.87,7.308 9.34,6.841 8.81,6.374 8.824,5.469 9.374,4.819 9.922,4.169 10.796,4.02 11.326,4.486 c 0.53,0.467 0.515,1.372 -0.033,2.022 z M 20,20 c 0,2.209 -3.581,4 -8,4 -4.419,0 -8,-1.791 -8,-4 0,-1.678 2.069,-3.113 5,-3.707 v 2.052 L 8.564,18.451 C 6.869,18.942 6.048,19.474 6.048,20 c 0,0.526 0.82,1.058 2.516,1.548 2.088,0.603 4.777,0.605 6.874,-10e-4 C 17.144,21.054 17.934,20.52 17.945,20 17.934,19.48 17.144,18.946 15.438,18.453 L 15,18.346 v -2.052 c 2.931,0.593 5,2.028 5,3.706 z");
			add_location(path1, file$3, 58, 9, 2155);
			attr_dev(svg1, "id", "pinned");
			attr_dev(svg1, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg1, "width", "24");
			attr_dev(svg1, "height", "24");
			attr_dev(svg1, "viewBox", "0 0 24 24");
			attr_dev(svg1, "class", "svelte-1swdn0o");
			add_location(svg1, file$3, 52, 12, 2011);
			attr_dev(div0, "id", "pin-file");
			attr_dev(div0, "class", "action is-pinned svelte-1swdn0o");

			attr_dev(div0, "title", div0_title_value = /*is_pinned*/ ctx[6]
			? "Unpin this file"
			: "Pin this file");

			toggle_class(div0, "is-pinned", /*is_pinned*/ ctx[6]);
			add_location(div0, file$3, 32, 4, 996);
			attr_dev(path2, "d", "M23 12c0 1.042-.154 2.045-.425 3h-2.101c.335-.94.526-1.947.526-3 0-4.962-4.037-9-9-9-1.706 0-3.296.484-4.655 1.314l1.858 2.686h-6.994l2.152-7 1.849 2.673c1.684-1.049 3.659-1.673 5.79-1.673 6.074 0 11 4.925 11 11zm-6.354 7.692c-1.357.826-2.944 1.308-4.646 1.308-4.962 0-9-4.038-9-9 0-1.053.191-2.06.525-3h-2.1c-.271.955-.425 1.958-.425 3 0 6.075 4.925 11 11 11 2.127 0 4.099-.621 5.78-1.667l1.853 2.667 2.152-6.989h-6.994l1.855 2.681z");
			add_location(path2, file$3, 73, 10, 3135);
			attr_dev(svg2, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg2, "viewBox", "0 0 24 24");
			attr_dev(svg2, "class", "svelte-1swdn0o");
			add_location(svg2, file$3, 72, 8, 3064);
			attr_dev(div1, "id", "update-moc");
			attr_dev(div1, "class", "action svelte-1swdn0o");
			attr_dev(div1, "title", "Update the Map of Content");
			add_location(div1, file$3, 64, 6, 2894);
			attr_dev(path3, "d", "M12 2c5.514 0 10 4.486 10 10s-4.486 10-10 10-10-4.486-10-10 4.486-10 10-10zm0-2c-6.627 0-12 5.373-12 12s5.373 12 12 12 12-5.373 12-12-5.373-12-12-12zm6 13h-12v-2h12v2z");
			add_location(path3, file$3, 87, 10, 3887);
			attr_dev(svg3, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg3, "viewBox", "0 0 24 24");
			attr_dev(svg3, "class", "svelte-1swdn0o");
			add_location(svg3, file$3, 86, 8, 3816);
			attr_dev(div2, "id", "minus-expand");
			attr_dev(div2, "class", "action svelte-1swdn0o");
			attr_dev(div2, "title", "Show fewer descendants");
			add_location(div2, file$3, 78, 6, 3638);
			attr_dev(path4, "d", "M12 2c5.514 0 10 4.486 10 10s-4.486 10-10 10-10-4.486-10-10 4.486-10 10-10zm0-2c-6.627 0-12 5.373-12 12s5.373 12 12 12 12-5.373 12-12-5.373-12-12-12zm6 13h-5v5h-2v-5h-5v-2h5v-5h2v5h5v2z");
			add_location(path4, file$3, 106, 10, 4458);
			attr_dev(svg4, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg4, "viewBox", "0 0 24 24");
			attr_dev(svg4, "fill-rule", "evenodd");
			attr_dev(svg4, "clip-rule", "evenodd");
			attr_dev(svg4, "class", "svelte-1swdn0o");
			add_location(svg4, file$3, 100, 8, 4298);
			attr_dev(div3, "id", "plus-expand");
			attr_dev(div3, "class", "action svelte-1swdn0o");
			attr_dev(div3, "title", "Show more descendants");
			add_location(div3, file$3, 92, 6, 4124);
			attr_dev(div4, "id", "top-bar-flex");
			attr_dev(div4, "class", "svelte-1swdn0o");
			add_location(div4, file$3, 63, 4, 2864);
			attr_dev(path5, "d", "M15 5.829l6.171 6.171-6.171 6.171v-3.171h-13v-6h13v-3.171zm-2-4.829v6h-13v10h13v6l11-11-11-11z");
			add_location(path5, file$3, 122, 9, 4975);
			attr_dev(svg5, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg5, "viewBox", "0 0 24 24");
			attr_dev(svg5, "class", "svelte-1swdn0o");
			add_location(svg5, file$3, 121, 6, 4906);
			attr_dev(div5, "id", "scroll_up");
			attr_dev(div5, "title", "Scroll to top");
			attr_dev(div5, "class", "action svelte-1swdn0o");
			add_location(div5, file$3, 112, 4, 4722);
			attr_dev(div6, "id", "top-bar");
			attr_dev(div6, "class", "svelte-1swdn0o");
			add_location(div6, file$3, 31, 2, 973);
			attr_dev(div7, "id", "main_moc_div");
			attr_dev(div7, "class", "svelte-1swdn0o");
			add_location(div7, file$3, 128, 2, 5136);
			attr_dev(div8, "id", "all-container");

			attr_dev(div8, "class", "" + (null_to_empty(document.body.classList.contains("theme-dark")
			? "dark-mode"
			: "light-mode") + " svelte-1swdn0o"));

			add_location(div8, file$3, 25, 0, 849);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div8, anchor);
			append_dev(div8, div6);
			append_dev(div6, div0);
			append_dev(div0, svg0);
			append_dev(svg0, path0);
			append_dev(div0, svg1);
			append_dev(svg1, path1);
			append_dev(div6, t0);
			append_dev(div6, div4);
			append_dev(div4, div1);
			append_dev(div1, svg2);
			append_dev(svg2, path2);
			append_dev(div4, t1);
			append_dev(div4, div2);
			append_dev(div2, svg3);
			append_dev(svg3, path3);
			append_dev(div4, t2);
			append_dev(div4, div3);
			append_dev(div3, svg4);
			append_dev(svg4, path4);
			append_dev(div6, t3);
			append_dev(div6, div5);
			append_dev(div5, svg5);
			append_dev(svg5, path5);
			/*div5_binding*/ ctx[17](div5);
			append_dev(div8, t4);
			append_dev(div8, div7);
			if_blocks[current_block_type_index].m(div7, null);
			/*div7_binding*/ ctx[23](div7);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(div0, "click", /*click_handler*/ ctx[13], false, false, false),
					listen_dev(div1, "click", /*click_handler_1*/ ctx[14], false, false, false),
					listen_dev(div2, "click", /*click_handler_2*/ ctx[15], false, false, false),
					listen_dev(div3, "click", /*click_handler_3*/ ctx[16], false, false, false),
					listen_dev(div5, "click", /*click_handler_4*/ ctx[18], false, false, false),
					listen_dev(div7, "scroll", /*scroll_handler*/ ctx[24], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (!current || dirty[0] & /*is_pinned*/ 64 && div0_title_value !== (div0_title_value = /*is_pinned*/ ctx[6]
			? "Unpin this file"
			: "Pin this file")) {
				attr_dev(div0, "title", div0_title_value);
			}

			if (dirty[0] & /*is_pinned*/ 64) {
				toggle_class(div0, "is-pinned", /*is_pinned*/ ctx[6]);
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(div7, null);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div8);
			/*div5_binding*/ ctx[17](null);
			if_blocks[current_block_type_index].d();
			/*div7_binding*/ ctx[23](null);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$3.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$3($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('View', slots, []);
	
	let { view } = $$props;
	let { paths } = $$props;
	let { errors } = $$props;

	//let open_file_folder2=view.open_file_path.split("/")
	//open_file_folder2.pop()
	//let open_file_folder=open_file_folder2.join('/')
	let plugin = view.plugin;

	let app = plugin.app;
	let db = plugin.db;
	let cn_path = plugin.settings.get("CN_path");
	let expandMan = new expandManager();
	let scroll_up_div;
	let settings = plugin.settings;
	let main_div;
	let scroll_up_div_already_visible = false;
	let is_pinned = false;
	const writable_props = ['view', 'paths', 'errors'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<View> was created with unknown prop '${key}'`);
	});

	const click_handler = () => {
		$$invalidate(0, view.is_pinned = !view.is_pinned, view);
		$$invalidate(6, is_pinned = !is_pinned);

		if (view.is_pinned) ;
	};

	const click_handler_1 = () => {
		db.update();
	};

	const click_handler_2 = () => {
		expandMan.contract();
	};

	const click_handler_3 = () => {
		expandMan.expand();
	};

	function div5_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			scroll_up_div = $$value;
			$$invalidate(3, scroll_up_div);
		});
	}

	const click_handler_4 = () => {
		$$invalidate(4, main_div.scrollTop = 0, main_div);
	};

	const click_handler_5 = event => NavigateToFile(app, cn_path, event);

	const click_handler_6 = () => {
		db.update();
	};

	const click_handler_7 = (pathitem, event) => NavigateToFile(app, pathitem[0], event);
	const click_handler_8 = (pathitem, event) => NavigateToFile(app, pathitem[0], event);

	function div7_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			main_div = $$value;
			$$invalidate(4, main_div);
		});
	}

	const scroll_handler = e => {
		if (e.target.scrollTop > 30 && !scroll_up_div_already_visible) {
			$$invalidate(3, scroll_up_div.style.display = "block", scroll_up_div);
			$$invalidate(5, scroll_up_div_already_visible = true);
		} else //hide the arrow if user scrolls back to the top
		if (e.target.scrollTop <= 30 && scroll_up_div_already_visible) {
			$$invalidate(3, scroll_up_div.style.display = "none", scroll_up_div);
			$$invalidate(5, scroll_up_div_already_visible = false);
		}
	};

	$$self.$$set = $$props => {
		if ('view' in $$props) $$invalidate(0, view = $$props.view);
		if ('paths' in $$props) $$invalidate(1, paths = $$props.paths);
		if ('errors' in $$props) $$invalidate(2, errors = $$props.errors);
	};

	$$self.$capture_state = () => ({
		LINKED_BOTH,
		LINKED_TO,
		LINKED_FROM,
		GetDisplayName,
		IsCtrlPressed,
		NavigateToFile,
		Log,
		NoLinkImage,
		Descendants,
		UpdateNotice,
		expandManager,
		view,
		paths,
		errors,
		plugin,
		app,
		db,
		cn_path,
		expandMan,
		scroll_up_div,
		settings,
		main_div,
		scroll_up_div_already_visible,
		is_pinned
	});

	$$self.$inject_state = $$props => {
		if ('view' in $$props) $$invalidate(0, view = $$props.view);
		if ('paths' in $$props) $$invalidate(1, paths = $$props.paths);
		if ('errors' in $$props) $$invalidate(2, errors = $$props.errors);
		if ('plugin' in $$props) $$invalidate(7, plugin = $$props.plugin);
		if ('app' in $$props) $$invalidate(8, app = $$props.app);
		if ('db' in $$props) $$invalidate(9, db = $$props.db);
		if ('cn_path' in $$props) $$invalidate(10, cn_path = $$props.cn_path);
		if ('expandMan' in $$props) $$invalidate(11, expandMan = $$props.expandMan);
		if ('scroll_up_div' in $$props) $$invalidate(3, scroll_up_div = $$props.scroll_up_div);
		if ('settings' in $$props) $$invalidate(12, settings = $$props.settings);
		if ('main_div' in $$props) $$invalidate(4, main_div = $$props.main_div);
		if ('scroll_up_div_already_visible' in $$props) $$invalidate(5, scroll_up_div_already_visible = $$props.scroll_up_div_already_visible);
		if ('is_pinned' in $$props) $$invalidate(6, is_pinned = $$props.is_pinned);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		view,
		paths,
		errors,
		scroll_up_div,
		main_div,
		scroll_up_div_already_visible,
		is_pinned,
		plugin,
		app,
		db,
		cn_path,
		expandMan,
		settings,
		click_handler,
		click_handler_1,
		click_handler_2,
		click_handler_3,
		div5_binding,
		click_handler_4,
		click_handler_5,
		click_handler_6,
		click_handler_7,
		click_handler_8,
		div7_binding,
		scroll_handler
	];
}

class View extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$3, create_fragment$3, safe_not_equal, { view: 0, paths: 1, errors: 2 }, add_css$3, [-1, -1]);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "View",
			options,
			id: create_fragment$3.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*view*/ ctx[0] === undefined && !('view' in props)) {
			console.warn("<View> was created without expected prop 'view'");
		}

		if (/*paths*/ ctx[1] === undefined && !('paths' in props)) {
			console.warn("<View> was created without expected prop 'paths'");
		}

		if (/*errors*/ ctx[2] === undefined && !('errors' in props)) {
			console.warn("<View> was created without expected prop 'errors'");
		}
	}

	get view() {
		throw new Error("<View>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set view(value) {
		throw new Error("<View>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get paths() {
		throw new Error("<View>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set paths(value) {
		throw new Error("<View>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get errors() {
		throw new Error("<View>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set errors(value) {
		throw new Error("<View>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

class MOCView extends obsidian.ItemView {
    constructor(leaf, plugin) {
        super(leaf);
        this.max_indent = 5;
        this.is_pinned = false;
        this.plugin = plugin;
        this.db = this.plugin.db;
        this.settings = plugin.settings;
        this.app = this.plugin.app;
        // register with the main class
        this.plugin.registerViewInstance(this);
        this.plugin.app.workspace.onLayoutReady(() => this.init());
        // rerender on css change to adapt to dark/light mode changes
        // TODO pass command to svelte, not recreate it
        this.plugin.app.workspace.on("css-change", () => {
            this.rerender();
        });
    }
    init() {
        // update the path view every time a file is opened
        this.registerEvent(this.app.workspace.on("file-open", (file) => {
            if (!this.is_pinned) {
                this.monitorNote();
                this.rerender();
            }
        }));
        this.monitorNote();
        this.rerender();
    }
    async onOpen() { }
    /** reload paths and recreate the svelte instance */
    rerender() {
        // destroy old pathview/errorview instance
        // set symbol to undefined to avoid "This component has already been destroyed" message
        if (this._app) {
            this._app.$destroy();
            this._app = undefined;
        }
        let errors = [];
        if (this.db.database_updating) {
            errors.push("Updating...");
        }
        else if (!this.db.database_complete) {
            errors.push(`Your Map of Content couldn't be created.<br><br> Make sure your Central Note path <code>'${this.settings.get("CN_path")}'</code> is correct. You can change this path in the settings tab.`);
        }
        else if (this.app.workspace.getActiveFile() == null) {
            errors.push("No file is open");
        }
        else if (this.settings.isExludedFile(this.app.workspace.getActiveFile())) {
            errors.push("This file has been excluded from the Map of Content.");
        }
        else {
            this.open_file_path = this.app.workspace.getActiveFile().path;
            if (this.db.getNoteFromPath(this.open_file_path) == undefined) {
                errors.push("Updating...");
                this.db.update(true);
            }
        }
        let paths = [];
        if (errors.length == 0) {
            let all_paths = this.db.findPaths(this.open_file_path);
            if (all_paths.length == 0) ;
            paths = all_paths.map((p) => p.items.slice());
        }
        else {
            this.open_file_path = "None";
            paths = [];
        }
        this._app = new View({
            target: this.contentEl,
            props: { view: this, paths: paths, errors: errors },
        });
    }
    onClose() {
        if (this._app) {
            this._app.$destroy();
            this._app = undefined; // set symbol to undefined to avoid "This component has already been destroyed" message
        }
        this.plugin.unregisterViewInstance(this);
        return Promise.resolve();
    }
    async monitorNote() {
        let rerender = false;
        let active_file = this.app.workspace.getActiveFile();
        if (active_file == null) {
            return;
        }
        if (!this.settings.get("auto_update_on_file_change")) {
            return;
        }
        if (active_file == null || this.settings.isExludedFile(active_file)) {
            return;
        }
        if (this.monitoring_note &&
            this.app.metadataCache.getCache(this.monitoring_note) == undefined) {
            rerender = true;
        }
        let path = active_file.path;
        Log("Old monitoring note: " + this.monitoring_note);
        if (this.monitoring_note &&
            this.app.metadataCache.getCache(this.monitoring_note)) {
            if (!(path === this.monitoring_note)) {
                let now_links = this.db.getLinksFromNote(this.monitoring_note);
                if (!(JSON.stringify(now_links) ==
                    JSON.stringify(this.monitoring_note_links))) {
                    rerender = true;
                }
            }
        }
        this.monitoring_note = path;
        this.monitoring_note_links = this.db.getLinksFromNote(path);
        if (rerender) {
            this.db.update(true);
        }
    }
    getViewType() {
        return MOC_VIEW_TYPE;
    }
    getDisplayText() {
        return "Map of Content";
    }
    getIcon() {
        return "stacked-levels";
    }
}

/* src/svelte/settings/ExcludedFolders.svelte generated by Svelte v3.42.1 */
const file$2 = "src/svelte/settings/ExcludedFolders.svelte";

function add_css$2(target) {
	append_styles(target, "svelte-8qyew1", ".svelte-8qyew1{font-size:1em}h2.svelte-8qyew1{text-align:left}div#exluded-folders.svelte-8qyew1{display:flex;flex-wrap:wrap;column-gap:10px}div#list-excluded.svelte-8qyew1{width:300px}#excluded-select.svelte-8qyew1{height:300px;width:300px;font-size:1em;overflow:auto}#add-remove-exluded.svelte-8qyew1{height:300px;width:300px}div#currently-excluded.svelte-8qyew1{width:600px;max-height:300px;overflow:hidden}div#currently-excluded-list.svelte-8qyew1{overflow:auto;max-height:260px}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXhjbHVkZWRGb2xkZXJzLnN2ZWx0ZSIsIm1hcHBpbmdzIjoiQUF3S0UsY0FBRSxDQUFBLEFBQ0EsU0FBUyxDQUFFLEdBQUcsQUFDaEIsQ0FBQSxBQUVBLEVBQUUsY0FBQyxDQUFBLEFBQ0QsVUFBVSxDQUFFLElBQUksQUFDbEIsQ0FBQSxBQUVBLEdBQUcsZ0JBQWdCLGNBQUMsQ0FBQSxBQUNsQixPQUFPLENBQUUsSUFBSSxDQUNiLFNBQVMsQ0FBRSxJQUFJLENBQ2YsVUFBVSxDQUFFLElBQUksQUFDbEIsQ0FBQSxBQUVBLEdBQUcsY0FBYyxjQUFDLENBQUEsQUFDaEIsS0FBSyxDQUFFLEtBQUssQUFDZCxDQUFBLEFBRUEsZ0JBQWdCLGNBQUMsQ0FBQSxBQUNmLE1BQU0sQ0FBRSxLQUFLLENBQ2IsS0FBSyxDQUFFLEtBQUssQ0FDWixTQUFTLENBQUUsR0FBRyxDQUNkLFFBQVEsQ0FBRSxJQUFJLEFBQ2hCLENBQUEsQUFFQSxtQkFBbUIsY0FBQyxDQUFBLEFBQ2xCLE1BQU0sQ0FBRSxLQUFLLENBQ2IsS0FBSyxDQUFFLEtBQUssQUFDZCxDQUFBLEFBQ0EsR0FBRyxtQkFBbUIsY0FBQyxDQUFBLEFBQ3JCLEtBQUssQ0FBRSxLQUFLLENBQ1osVUFBVSxDQUFFLEtBQUssQ0FDakIsUUFBUSxDQUFFLE1BQU0sQUFDbEIsQ0FBQSxBQUNBLEdBQUcsd0JBQXdCLGNBQUMsQ0FBQSxBQUMxQixRQUFRLENBQUUsSUFBSSxDQUNkLFVBQVUsQ0FBRSxLQUFLLEFBQ25CLENBQUEiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiRXhjbHVkZWRGb2xkZXJzLnN2ZWx0ZSJdfQ== */");
}

function get_each_context$2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[20] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[23] = list[i];
	return child_ctx;
}

// (107:6) {#each all_folders as folder_path}
function create_each_block_1(ctx) {
	let option;

	const block = {
		c: function create() {
			option = element("option");
			option.__value = /*folder_path*/ ctx[23];
			option.value = option.__value;
			attr_dev(option, "class", "svelte-8qyew1");
			add_location(option, file$2, 107, 8, 3187);
		},
		m: function mount(target, anchor) {
			insert_dev(target, option, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(option);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(107:6) {#each all_folders as folder_path}",
		ctx
	});

	return block;
}

// (144:8) {#each excluded_files as file_path}
function create_each_block$2(ctx) {
	let li;
	let t_value = /*file_path*/ ctx[20] + "";
	let t;

	const block = {
		c: function create() {
			li = element("li");
			t = text(t_value);
			attr_dev(li, "class", "svelte-8qyew1");
			add_location(li, file$2, 144, 10, 4014);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*excluded_files*/ 2 && t_value !== (t_value = /*file_path*/ ctx[20] + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$2.name,
		type: "each",
		source: "(144:8) {#each excluded_files as file_path}",
		ctx
	});

	return block;
}

function create_fragment$2(ctx) {
	let h2;
	let t1;
	let div4;
	let div0;
	let select;
	let t2;
	let div1;
	let label;
	let t4;
	let input0;
	let t5;
	let datalist;
	let br0;
	let t6;
	let br1;
	let t7;
	let input1;
	let br2;
	let t8;
	let input2;
	let br3;
	let br4;
	let t9;
	let div3;
	let t10;
	let t11_value = /*excluded_files*/ ctx[1].length + "";
	let t11;
	let t12;
	let input3;
	let input3_value_value;
	let t13;
	let div2;
	let ul;
	let div2_style_value;
	let mounted;
	let dispose;
	let each_value_1 = /*all_folders*/ ctx[5];
	validate_each_argument(each_value_1);
	let each_blocks_1 = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	let each_value = /*excluded_files*/ ctx[1];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			h2 = element("h2");
			h2.textContent = "Excluded folders";
			t1 = space();
			div4 = element("div");
			div0 = element("div");
			select = element("select");
			t2 = space();
			div1 = element("div");
			label = element("label");
			label.textContent = "Add a folder:";
			t4 = space();
			input0 = element("input");
			t5 = space();
			datalist = element("datalist");

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			br0 = element("br");
			t6 = space();
			br1 = element("br");
			t7 = space();
			input1 = element("input");
			br2 = element("br");
			t8 = space();
			input2 = element("input");
			br3 = element("br");
			br4 = element("br");
			t9 = space();
			div3 = element("div");
			t10 = text("Currently excluded files: ");
			t11 = text(t11_value);
			t12 = space();
			input3 = element("input");
			t13 = space();
			div2 = element("div");
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr_dev(h2, "class", "svelte-8qyew1");
			add_location(h2, file$2, 82, 0, 2549);
			attr_dev(select, "id", "excluded-select");
			attr_dev(select, "name", "lstValue");
			attr_dev(select, "type", "text");
			select.multiple = true;
			attr_dev(select, "class", "svelte-8qyew1");
			add_location(select, file$2, 86, 4, 2634);
			attr_dev(div0, "id", "list-excluded");
			attr_dev(div0, "class", "svelte-8qyew1");
			add_location(div0, file$2, 85, 2, 2605);
			attr_dev(label, "for", "myBrowser");
			attr_dev(label, "class", "svelte-8qyew1");
			add_location(label, file$2, 95, 4, 2807);
			attr_dev(input0, "list", "exlude-folder");
			attr_dev(input0, "id", "Exluded-folders");
			attr_dev(input0, "type", "text");
			attr_dev(input0, "placeholder", "Start typing to see suggestions...");
			set_style(input0, "width", "300px");
			attr_dev(input0, "class", "svelte-8qyew1");
			add_location(input0, file$2, 96, 4, 2857);
			attr_dev(datalist, "id", "exlude-folder");
			attr_dev(datalist, "class", "svelte-8qyew1");
			add_location(datalist, file$2, 105, 4, 3108);
			attr_dev(br0, "class", "svelte-8qyew1");
			add_location(br0, file$2, 109, 15, 3247);
			attr_dev(br1, "class", "svelte-8qyew1");
			add_location(br1, file$2, 110, 4, 3258);
			attr_dev(input1, "type", "button");
			attr_dev(input1, "name", "add");
			input1.value = "Add";
			attr_dev(input1, "class", "svelte-8qyew1");
			add_location(input1, file$2, 111, 4, 3269);
			attr_dev(br2, "class", "svelte-8qyew1");
			add_location(br2, file$2, 118, 6, 3390);
			attr_dev(input2, "type", "button");
			attr_dev(input2, "name", "delete");
			input2.value = "Delete";
			attr_dev(input2, "class", "svelte-8qyew1");
			add_location(input2, file$2, 119, 4, 3401);
			attr_dev(br3, "class", "svelte-8qyew1");
			add_location(br3, file$2, 126, 6, 3531);
			attr_dev(br4, "class", "svelte-8qyew1");
			add_location(br4, file$2, 126, 12, 3537);
			attr_dev(div1, "id", "add-remove-exluded");
			attr_dev(div1, "class", "svelte-8qyew1");
			add_location(div1, file$2, 94, 2, 2773);
			attr_dev(input3, "type", "button");
			attr_dev(input3, "name", "toggle-show-hidden");
			input3.value = input3_value_value = /*show_all_hidden*/ ctx[4] ? "Hide" : "Show";
			attr_dev(input3, "class", "svelte-8qyew1");
			add_location(input3, file$2, 130, 4, 3643);
			attr_dev(ul, "class", "svelte-8qyew1");
			add_location(ul, file$2, 142, 6, 3955);

			attr_dev(div2, "style", div2_style_value = /*show_all_hidden*/ ctx[4]
			? "display:block"
			: "display:none");

			attr_dev(div2, "id", "currently-excluded-list");
			attr_dev(div2, "class", "svelte-8qyew1");
			add_location(div2, file$2, 138, 4, 3838);
			attr_dev(div3, "id", "currently-excluded");
			attr_dev(div3, "class", "svelte-8qyew1");
			add_location(div3, file$2, 128, 2, 3555);
			attr_dev(div4, "id", "exluded-folders");
			attr_dev(div4, "class", "svelte-8qyew1");
			add_location(div4, file$2, 84, 0, 2576);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, h2, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, div4, anchor);
			append_dev(div4, div0);
			append_dev(div0, select);
			/*select_binding*/ ctx[10](select);
			append_dev(div4, t2);
			append_dev(div4, div1);
			append_dev(div1, label);
			append_dev(div1, t4);
			append_dev(div1, input0);
			/*input0_binding*/ ctx[11](input0);
			set_input_value(input0, /*exlude_path_input_value*/ ctx[2]);
			append_dev(div1, t5);
			append_dev(div1, datalist);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(datalist, null);
			}

			append_dev(div1, br0);
			append_dev(div1, t6);
			append_dev(div1, br1);
			append_dev(div1, t7);
			append_dev(div1, input1);
			append_dev(div1, br2);
			append_dev(div1, t8);
			append_dev(div1, input2);
			append_dev(div1, br3);
			append_dev(div1, br4);
			append_dev(div4, t9);
			append_dev(div4, div3);
			append_dev(div3, t10);
			append_dev(div3, t11);
			append_dev(div3, t12);
			append_dev(div3, input3);
			append_dev(div3, t13);
			append_dev(div3, div2);
			append_dev(div2, ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			if (!mounted) {
				dispose = [
					listen_dev(input0, "input", /*input0_input_handler*/ ctx[12]),
					listen_dev(input1, "click", /*click_handler*/ ctx[13], false, false, false),
					listen_dev(input2, "click", /*click_handler_1*/ ctx[14], false, false, false),
					listen_dev(input3, "click", /*click_handler_2*/ ctx[15], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*exlude_path_input_value*/ 4 && input0.value !== /*exlude_path_input_value*/ ctx[2]) {
				set_input_value(input0, /*exlude_path_input_value*/ ctx[2]);
			}

			if (dirty & /*all_folders*/ 32) {
				each_value_1 = /*all_folders*/ ctx[5];
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(child_ctx, dirty);
					} else {
						each_blocks_1[i] = create_each_block_1(child_ctx);
						each_blocks_1[i].c();
						each_blocks_1[i].m(datalist, null);
					}
				}

				for (; i < each_blocks_1.length; i += 1) {
					each_blocks_1[i].d(1);
				}

				each_blocks_1.length = each_value_1.length;
			}

			if (dirty & /*excluded_files*/ 2 && t11_value !== (t11_value = /*excluded_files*/ ctx[1].length + "")) set_data_dev(t11, t11_value);

			if (dirty & /*show_all_hidden*/ 16 && input3_value_value !== (input3_value_value = /*show_all_hidden*/ ctx[4] ? "Hide" : "Show")) {
				prop_dev(input3, "value", input3_value_value);
			}

			if (dirty & /*excluded_files*/ 2) {
				each_value = /*excluded_files*/ ctx[1];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$2(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$2(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (dirty & /*show_all_hidden*/ 16 && div2_style_value !== (div2_style_value = /*show_all_hidden*/ ctx[4]
			? "display:block"
			: "display:none")) {
				attr_dev(div2, "style", div2_style_value);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(h2);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(div4);
			/*select_binding*/ ctx[10](null);
			/*input0_binding*/ ctx[11](null);
			destroy_each(each_blocks_1, detaching);
			destroy_each(each_blocks, detaching);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('ExcludedFolders', slots, []);
	
	
	
	let { app } = $$props;
	let { plugin } = $$props;
	let excludedlist;
	let excluded_folders = plugin.settings.get("exluded_folders");

	// TODO show all exluded files in TextEdit not list
	// Select box based on https://www.c-sharpcorner.com/UploadFile/mahakgupta/add-and-remove-listbox-items-in-javascript/
	let all_folders = GetAllFolders(app);

	var list_options_no = 0;
	let excluded_files = allExcludedFiles();

	onMount(() => {
		// create select entries for all already excluded folders
		excluded_folders.forEach(folder => {
			$$invalidate(0, excludedlist.options[list_options_no] = new Option(folder, folder), excludedlist);
			list_options_no++;
		});
	});

	function allExcludedFiles() {
		let all_files = app.vault.getFiles().map(file => file.path);

		return all_files.filter(path_to_file => {
			return excluded_folders.some(path => path_to_file.startsWith(path));
		});
	}

	let exlude_path_input_value;
	let exlude_path_input;
	let show_all_hidden = false;

	/** update the list of exluded files and save the updated settings*/
	function save() {
		$$invalidate(1, excluded_files = allExcludedFiles());
		plugin.settings.set({ exluded_folders: excluded_folders });
	}

	function addValue() {
		if (!exlude_path_input_value) {
			return;
		}

		// Return if folder doesn't exist
		if (!all_folders.contains(exlude_path_input_value)) {
			alert("Please choose a folder from the list");
			return;
		}

		// Return if folder already on list
		if (excluded_folders.contains(exlude_path_input_value)) {
			$$invalidate(3, exlude_path_input.value = "", exlude_path_input);
			$$invalidate(2, exlude_path_input_value = "");
			return;
		}

		// add option to select box
		let AddOpt = new Option(exlude_path_input_value, exlude_path_input_value);

		$$invalidate(0, excludedlist.options[list_options_no++] = AddOpt, excludedlist);
		excluded_folders.push(exlude_path_input_value);

		// reset input field
		$$invalidate(3, exlude_path_input.value = "", exlude_path_input);

		$$invalidate(2, exlude_path_input_value = "");
		save();
		return true;
	}

	function deleteValue() {
		let s = 1;
		let Index;

		if (excludedlist.selectedIndex == -1) {
			alert("Please select an item from the list");
			return true;
		}

		while (s > 0) {
			Index = excludedlist.selectedIndex;

			if (Index >= 0) {
				excluded_folders.remove(excludedlist.options[Index].value);
				$$invalidate(0, excludedlist.options[Index] = null, excludedlist);
				--list_options_no;
			} else s = 0;
		}

		save();
		return true;
	}

	const writable_props = ['app', 'plugin'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ExcludedFolders> was created with unknown prop '${key}'`);
	});

	function select_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			excludedlist = $$value;
			$$invalidate(0, excludedlist);
		});
	}

	function input0_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			exlude_path_input = $$value;
			$$invalidate(3, exlude_path_input);
		});
	}

	function input0_input_handler() {
		exlude_path_input_value = this.value;
		$$invalidate(2, exlude_path_input_value);
	}

	const click_handler = () => {
		addValue();
	};

	const click_handler_1 = () => {
		deleteValue();
	};

	const click_handler_2 = () => {
		$$invalidate(4, show_all_hidden = !show_all_hidden);
	};

	$$self.$$set = $$props => {
		if ('app' in $$props) $$invalidate(8, app = $$props.app);
		if ('plugin' in $$props) $$invalidate(9, plugin = $$props.plugin);
	};

	$$self.$capture_state = () => ({
		onMount,
		Log,
		GetAllFolders,
		app,
		plugin,
		excludedlist,
		excluded_folders,
		all_folders,
		list_options_no,
		excluded_files,
		allExcludedFiles,
		exlude_path_input_value,
		exlude_path_input,
		show_all_hidden,
		save,
		addValue,
		deleteValue
	});

	$$self.$inject_state = $$props => {
		if ('app' in $$props) $$invalidate(8, app = $$props.app);
		if ('plugin' in $$props) $$invalidate(9, plugin = $$props.plugin);
		if ('excludedlist' in $$props) $$invalidate(0, excludedlist = $$props.excludedlist);
		if ('excluded_folders' in $$props) excluded_folders = $$props.excluded_folders;
		if ('all_folders' in $$props) $$invalidate(5, all_folders = $$props.all_folders);
		if ('list_options_no' in $$props) list_options_no = $$props.list_options_no;
		if ('excluded_files' in $$props) $$invalidate(1, excluded_files = $$props.excluded_files);
		if ('exlude_path_input_value' in $$props) $$invalidate(2, exlude_path_input_value = $$props.exlude_path_input_value);
		if ('exlude_path_input' in $$props) $$invalidate(3, exlude_path_input = $$props.exlude_path_input);
		if ('show_all_hidden' in $$props) $$invalidate(4, show_all_hidden = $$props.show_all_hidden);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		excludedlist,
		excluded_files,
		exlude_path_input_value,
		exlude_path_input,
		show_all_hidden,
		all_folders,
		addValue,
		deleteValue,
		app,
		plugin,
		select_binding,
		input0_binding,
		input0_input_handler,
		click_handler,
		click_handler_1,
		click_handler_2
	];
}

class ExcludedFolders extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, { app: 8, plugin: 9 }, add_css$2);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "ExcludedFolders",
			options,
			id: create_fragment$2.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*app*/ ctx[8] === undefined && !('app' in props)) {
			console.warn("<ExcludedFolders> was created without expected prop 'app'");
		}

		if (/*plugin*/ ctx[9] === undefined && !('plugin' in props)) {
			console.warn("<ExcludedFolders> was created without expected prop 'plugin'");
		}
	}

	get app() {
		throw new Error("<ExcludedFolders>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set app(value) {
		throw new Error("<ExcludedFolders>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get plugin() {
		throw new Error("<ExcludedFolders>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set plugin(value) {
		throw new Error("<ExcludedFolders>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/svelte/settings/ExcludedFilenames.svelte generated by Svelte v3.42.1 */
const file$1 = "src/svelte/settings/ExcludedFilenames.svelte";

function add_css$1(target) {
	append_styles(target, "svelte-bfysum", ".svelte-bfysum{font-size:1em}h2.svelte-bfysum{text-align:left}div#exlude-filenames.svelte-bfysum{display:flex;flex-wrap:wrap;column-gap:10px}div#list-excluded.svelte-bfysum{width:300px}#excluded-select.svelte-bfysum{height:300px;width:300px;font-size:1em;overflow:auto}#add-remove-exluded.svelte-bfysum{height:300px;width:300px}div#currently-excluded.svelte-bfysum{width:600px;max-height:300px;overflow:hidden}div#currently-excluded-list.svelte-bfysum{overflow:auto;max-height:260px}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXhjbHVkZWRGaWxlbmFtZXMuc3ZlbHRlIiwibWFwcGluZ3MiOiJBQXVLRSxjQUFFLENBQUEsQUFDQSxTQUFTLENBQUUsR0FBRyxBQUNoQixDQUFBLEFBRUEsRUFBRSxjQUFDLENBQUEsQUFDRCxVQUFVLENBQUUsSUFBSSxBQUNsQixDQUFBLEFBRUEsR0FBRyxpQkFBaUIsY0FBQyxDQUFBLEFBQ25CLE9BQU8sQ0FBRSxJQUFJLENBQ2IsU0FBUyxDQUFFLElBQUksQ0FDZixVQUFVLENBQUUsSUFBSSxBQUNsQixDQUFBLEFBRUEsR0FBRyxjQUFjLGNBQUMsQ0FBQSxBQUNoQixLQUFLLENBQUUsS0FBSyxBQUNkLENBQUEsQUFFQSxnQkFBZ0IsY0FBQyxDQUFBLEFBQ2YsTUFBTSxDQUFFLEtBQUssQ0FDYixLQUFLLENBQUUsS0FBSyxDQUNaLFNBQVMsQ0FBRSxHQUFHLENBQ2QsUUFBUSxDQUFFLElBQUksQUFDaEIsQ0FBQSxBQUVBLG1CQUFtQixjQUFDLENBQUEsQUFDbEIsTUFBTSxDQUFFLEtBQUssQ0FDYixLQUFLLENBQUUsS0FBSyxBQUNkLENBQUEsQUFDQSxHQUFHLG1CQUFtQixjQUFDLENBQUEsQUFDckIsS0FBSyxDQUFFLEtBQUssQ0FDWixVQUFVLENBQUUsS0FBSyxDQUNqQixRQUFRLENBQUUsTUFBTSxBQUNsQixDQUFBLEFBQ0EsR0FBRyx3QkFBd0IsY0FBQyxDQUFBLEFBQzFCLFFBQVEsQ0FBRSxJQUFJLENBQ2QsVUFBVSxDQUFFLEtBQUssQUFDbkIsQ0FBQSIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJFeGNsdWRlZEZpbGVuYW1lcy5zdmVsdGUiXX0= */");
}

function get_each_context$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[20] = list[i];
	return child_ctx;
}

// (137:8) {#each excluded_files as file_path}
function create_each_block$1(ctx) {
	let li;
	let t_value = /*file_path*/ ctx[20] + "";
	let t;

	const block = {
		c: function create() {
			li = element("li");
			t = text(t_value);
			attr_dev(li, "class", "svelte-bfysum");
			add_location(li, file$1, 137, 10, 3793);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*excluded_files*/ 2 && t_value !== (t_value = /*file_path*/ ctx[20] + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$1.name,
		type: "each",
		source: "(137:8) {#each excluded_files as file_path}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let h2;
	let t1;
	let br0;
	let br1;
	let t2;
	let div4;
	let div0;
	let select;
	let t3;
	let div1;
	let label;
	let t5;
	let input0;
	let t6;
	let br2;
	let t7;
	let br3;
	let t8;
	let input1;
	let br4;
	let t9;
	let input2;
	let br5;
	let br6;
	let t10;
	let div3;
	let t11;
	let t12_value = /*excluded_files*/ ctx[1].length + "";
	let t12;
	let t13;
	let input3;
	let input3_value_value;
	let t14;
	let div2;
	let ul;
	let div2_style_value;
	let mounted;
	let dispose;
	let each_value = /*excluded_files*/ ctx[1];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			h2 = element("h2");
			h2.textContent = "Excluded filenames";
			t1 = text("\nFilenames that contain these phrases will not be included in the Map of Content.\nThat also includes the file extension.");
			br0 = element("br");
			br1 = element("br");
			t2 = space();
			div4 = element("div");
			div0 = element("div");
			select = element("select");
			t3 = space();
			div1 = element("div");
			label = element("label");
			label.textContent = "Add a phrase:";
			t5 = space();
			input0 = element("input");
			t6 = space();
			br2 = element("br");
			t7 = space();
			br3 = element("br");
			t8 = space();
			input1 = element("input");
			br4 = element("br");
			t9 = space();
			input2 = element("input");
			br5 = element("br");
			br6 = element("br");
			t10 = space();
			div3 = element("div");
			t11 = text("Currently excluded files: ");
			t12 = text(t12_value);
			t13 = space();
			input3 = element("input");
			t14 = space();
			div2 = element("div");
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr_dev(h2, "class", "svelte-bfysum");
			add_location(h2, file$1, 79, 0, 2406);
			attr_dev(br0, "class", "svelte-bfysum");
			add_location(br0, file$1, 81, 38, 2553);
			attr_dev(br1, "class", "svelte-bfysum");
			add_location(br1, file$1, 81, 44, 2559);
			attr_dev(select, "id", "excluded-select");
			attr_dev(select, "name", "lstValue");
			attr_dev(select, "type", "text");
			select.multiple = true;
			attr_dev(select, "class", "svelte-bfysum");
			add_location(select, file$1, 85, 4, 2626);
			attr_dev(div0, "id", "list-excluded");
			attr_dev(div0, "class", "svelte-bfysum");
			add_location(div0, file$1, 84, 2, 2597);
			attr_dev(label, "for", "myBrowser");
			attr_dev(label, "class", "svelte-bfysum");
			add_location(label, file$1, 94, 4, 2799);
			attr_dev(input0, "id", "Exluded-filenames");
			attr_dev(input0, "type", "text");
			set_style(input0, "width", "300px");
			attr_dev(input0, "class", "svelte-bfysum");
			add_location(input0, file$1, 95, 4, 2849);
			attr_dev(br2, "class", "svelte-bfysum");
			add_location(br2, file$1, 102, 4, 3026);
			attr_dev(br3, "class", "svelte-bfysum");
			add_location(br3, file$1, 103, 4, 3037);
			attr_dev(input1, "type", "button");
			attr_dev(input1, "name", "add");
			input1.value = "Add";
			attr_dev(input1, "class", "svelte-bfysum");
			add_location(input1, file$1, 104, 4, 3048);
			attr_dev(br4, "class", "svelte-bfysum");
			add_location(br4, file$1, 111, 6, 3169);
			attr_dev(input2, "type", "button");
			attr_dev(input2, "name", "delete");
			input2.value = "Delete";
			attr_dev(input2, "class", "svelte-bfysum");
			add_location(input2, file$1, 112, 4, 3180);
			attr_dev(br5, "class", "svelte-bfysum");
			add_location(br5, file$1, 119, 6, 3310);
			attr_dev(br6, "class", "svelte-bfysum");
			add_location(br6, file$1, 119, 12, 3316);
			attr_dev(div1, "id", "add-remove-exluded");
			attr_dev(div1, "class", "svelte-bfysum");
			add_location(div1, file$1, 93, 2, 2765);
			attr_dev(input3, "type", "button");
			attr_dev(input3, "name", "toggle-show-hidden");
			input3.value = input3_value_value = /*show_all_hidden*/ ctx[4] ? "Hide" : "Show";
			attr_dev(input3, "class", "svelte-bfysum");
			add_location(input3, file$1, 123, 4, 3422);
			attr_dev(ul, "class", "svelte-bfysum");
			add_location(ul, file$1, 135, 6, 3734);

			attr_dev(div2, "style", div2_style_value = /*show_all_hidden*/ ctx[4]
			? "display:block"
			: "display:none");

			attr_dev(div2, "id", "currently-excluded-list");
			attr_dev(div2, "class", "svelte-bfysum");
			add_location(div2, file$1, 131, 4, 3617);
			attr_dev(div3, "id", "currently-excluded");
			attr_dev(div3, "class", "svelte-bfysum");
			add_location(div3, file$1, 121, 2, 3334);
			attr_dev(div4, "id", "exlude-filenames");
			attr_dev(div4, "class", "svelte-bfysum");
			add_location(div4, file$1, 83, 0, 2567);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, h2, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, br0, anchor);
			insert_dev(target, br1, anchor);
			insert_dev(target, t2, anchor);
			insert_dev(target, div4, anchor);
			append_dev(div4, div0);
			append_dev(div0, select);
			/*select_binding*/ ctx[9](select);
			append_dev(div4, t3);
			append_dev(div4, div1);
			append_dev(div1, label);
			append_dev(div1, t5);
			append_dev(div1, input0);
			/*input0_binding*/ ctx[10](input0);
			set_input_value(input0, /*exclude_phrase_input_value*/ ctx[2]);
			append_dev(div1, t6);
			append_dev(div1, br2);
			append_dev(div1, t7);
			append_dev(div1, br3);
			append_dev(div1, t8);
			append_dev(div1, input1);
			append_dev(div1, br4);
			append_dev(div1, t9);
			append_dev(div1, input2);
			append_dev(div1, br5);
			append_dev(div1, br6);
			append_dev(div4, t10);
			append_dev(div4, div3);
			append_dev(div3, t11);
			append_dev(div3, t12);
			append_dev(div3, t13);
			append_dev(div3, input3);
			append_dev(div3, t14);
			append_dev(div3, div2);
			append_dev(div2, ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			if (!mounted) {
				dispose = [
					listen_dev(input0, "input", /*input0_input_handler*/ ctx[11]),
					listen_dev(input1, "click", /*click_handler*/ ctx[12], false, false, false),
					listen_dev(input2, "click", /*click_handler_1*/ ctx[13], false, false, false),
					listen_dev(input3, "click", /*click_handler_2*/ ctx[14], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*exclude_phrase_input_value*/ 4 && input0.value !== /*exclude_phrase_input_value*/ ctx[2]) {
				set_input_value(input0, /*exclude_phrase_input_value*/ ctx[2]);
			}

			if (dirty & /*excluded_files*/ 2 && t12_value !== (t12_value = /*excluded_files*/ ctx[1].length + "")) set_data_dev(t12, t12_value);

			if (dirty & /*show_all_hidden*/ 16 && input3_value_value !== (input3_value_value = /*show_all_hidden*/ ctx[4] ? "Hide" : "Show")) {
				prop_dev(input3, "value", input3_value_value);
			}

			if (dirty & /*excluded_files*/ 2) {
				each_value = /*excluded_files*/ ctx[1];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$1(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (dirty & /*show_all_hidden*/ 16 && div2_style_value !== (div2_style_value = /*show_all_hidden*/ ctx[4]
			? "display:block"
			: "display:none")) {
				attr_dev(div2, "style", div2_style_value);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(h2);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(br0);
			if (detaching) detach_dev(br1);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(div4);
			/*select_binding*/ ctx[9](null);
			/*input0_binding*/ ctx[10](null);
			destroy_each(each_blocks, detaching);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('ExcludedFilenames', slots, []);
	
	
	
	let { app } = $$props;
	let { plugin } = $$props;
	let excludedlist;
	let exluded_filename_components = plugin.settings.get("exluded_filename_components");
	let all_files = app.vault.getFiles().map(file => file.basename + "." + file.extension);
	let excluded_files = allExcludedFiles();

	// TODO show all exluded files in TextEdit not list
	// add all existing excluded folders to select element
	var list_options_no = 0;

	onMount(() => {
		// create select entries for all already excluded filename components
		exluded_filename_components.forEach(folder => {
			$$invalidate(0, excludedlist.options[list_options_no] = new Option(folder, folder), excludedlist);
			list_options_no++;
		});
	});

	function allExcludedFiles() {
		return all_files.filter(filename => {
			return exluded_filename_components.some(path => filename.contains(path));
		});
	}

	let exclude_phrase_input_value;
	let exclude_phrase_input;
	let show_all_hidden = false;

	/** update the list of exluded files and save the updated settings*/
	function save() {
		$$invalidate(1, excluded_files = allExcludedFiles());
		plugin.settings.set({ exluded_filename_components });
	}

	function addValue() {
		if (!exclude_phrase_input_value) {
			return;
		}

		// Return if folder already on list
		if (exluded_filename_components.contains(exclude_phrase_input_value)) {
			$$invalidate(3, exclude_phrase_input.value = "", exclude_phrase_input);
			$$invalidate(2, exclude_phrase_input_value = "");
			return;
		}

		// add option to select box
		let AddOpt = new Option(exclude_phrase_input_value, exclude_phrase_input_value);

		$$invalidate(0, excludedlist.options[list_options_no++] = AddOpt, excludedlist);
		exluded_filename_components.push(exclude_phrase_input_value);

		// reset input field
		$$invalidate(3, exclude_phrase_input.value = "", exclude_phrase_input);

		$$invalidate(2, exclude_phrase_input_value = "");
		save();
		return true;
	}

	function deleteValue() {
		let s = 1;
		let Index;

		if (excludedlist.selectedIndex == -1) {
			alert("Please select an item from the list");
			return true;
		}

		while (s > 0) {
			Index = excludedlist.selectedIndex;

			if (Index >= 0) {
				exluded_filename_components.remove(excludedlist.options[Index].value);
				$$invalidate(0, excludedlist.options[Index] = null, excludedlist);
				--list_options_no;
			} else s = 0;
		}

		save();
		return true;
	}

	const writable_props = ['app', 'plugin'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ExcludedFilenames> was created with unknown prop '${key}'`);
	});

	function select_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			excludedlist = $$value;
			$$invalidate(0, excludedlist);
		});
	}

	function input0_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			exclude_phrase_input = $$value;
			$$invalidate(3, exclude_phrase_input);
		});
	}

	function input0_input_handler() {
		exclude_phrase_input_value = this.value;
		$$invalidate(2, exclude_phrase_input_value);
	}

	const click_handler = () => {
		addValue();
	};

	const click_handler_1 = () => {
		deleteValue();
	};

	const click_handler_2 = () => {
		$$invalidate(4, show_all_hidden = !show_all_hidden);
	};

	$$self.$$set = $$props => {
		if ('app' in $$props) $$invalidate(7, app = $$props.app);
		if ('plugin' in $$props) $$invalidate(8, plugin = $$props.plugin);
	};

	$$self.$capture_state = () => ({
		onMount,
		app,
		plugin,
		excludedlist,
		exluded_filename_components,
		all_files,
		excluded_files,
		list_options_no,
		allExcludedFiles,
		exclude_phrase_input_value,
		exclude_phrase_input,
		show_all_hidden,
		save,
		addValue,
		deleteValue
	});

	$$self.$inject_state = $$props => {
		if ('app' in $$props) $$invalidate(7, app = $$props.app);
		if ('plugin' in $$props) $$invalidate(8, plugin = $$props.plugin);
		if ('excludedlist' in $$props) $$invalidate(0, excludedlist = $$props.excludedlist);
		if ('exluded_filename_components' in $$props) exluded_filename_components = $$props.exluded_filename_components;
		if ('all_files' in $$props) all_files = $$props.all_files;
		if ('excluded_files' in $$props) $$invalidate(1, excluded_files = $$props.excluded_files);
		if ('list_options_no' in $$props) list_options_no = $$props.list_options_no;
		if ('exclude_phrase_input_value' in $$props) $$invalidate(2, exclude_phrase_input_value = $$props.exclude_phrase_input_value);
		if ('exclude_phrase_input' in $$props) $$invalidate(3, exclude_phrase_input = $$props.exclude_phrase_input);
		if ('show_all_hidden' in $$props) $$invalidate(4, show_all_hidden = $$props.show_all_hidden);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		excludedlist,
		excluded_files,
		exclude_phrase_input_value,
		exclude_phrase_input,
		show_all_hidden,
		addValue,
		deleteValue,
		app,
		plugin,
		select_binding,
		input0_binding,
		input0_input_handler,
		click_handler,
		click_handler_1,
		click_handler_2
	];
}

class ExcludedFilenames extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { app: 7, plugin: 8 }, add_css$1);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "ExcludedFilenames",
			options,
			id: create_fragment$1.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*app*/ ctx[7] === undefined && !('app' in props)) {
			console.warn("<ExcludedFilenames> was created without expected prop 'app'");
		}

		if (/*plugin*/ ctx[8] === undefined && !('plugin' in props)) {
			console.warn("<ExcludedFilenames> was created without expected prop 'plugin'");
		}
	}

	get app() {
		throw new Error("<ExcludedFilenames>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set app(value) {
		throw new Error("<ExcludedFilenames>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get plugin() {
		throw new Error("<ExcludedFilenames>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set plugin(value) {
		throw new Error("<ExcludedFilenames>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/svelte/Settings.svelte generated by Svelte v3.42.1 */
const file = "src/svelte/Settings.svelte";

function add_css(target) {
	append_styles(target, "svelte-83jj2u", "#settings-container.svelte-83jj2u{position:relative;height:100%;width:100%}#CN_select.svelte-83jj2u{min-width:200px;width:50%;font-size:1em}#update_TLI_path_button.svelte-83jj2u{margin-left:auto;margin-right:auto}h2.svelte-83jj2u{text-align:left}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2V0dGluZ3Muc3ZlbHRlIiwibWFwcGluZ3MiOiJBQTBJRSxtQkFBbUIsY0FBQyxDQUFBLEFBQ2xCLFFBQVEsQ0FBRSxRQUFRLENBQ2xCLE1BQU0sQ0FBRSxJQUFJLENBQ1osS0FBSyxDQUFFLElBQUksQUFDYixDQUFBLEFBQ0EsVUFBVSxjQUFDLENBQUEsQUFDVCxTQUFTLENBQUUsS0FBSyxDQUNoQixLQUFLLENBQUUsR0FBRyxDQUNWLFNBQVMsQ0FBRSxHQUFHLEFBQ2hCLENBQUEsQUFDQSx1QkFBdUIsY0FBQyxDQUFBLEFBQ3RCLFdBQVcsQ0FBRSxJQUFJLENBQ2pCLFlBQVksQ0FBRSxJQUFJLEFBQ3BCLENBQUEsQUFDQSxFQUFFLGNBQUMsQ0FBQSxBQUNELFVBQVUsQ0FBRSxJQUFJLEFBQ2xCLENBQUEiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiU2V0dGluZ3Muc3ZlbHRlIl19 */");
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[14] = list[i];
	return child_ctx;
}

// (47:6) {#each all_files as filepath}
function create_each_block(ctx) {
	let option;

	const block = {
		c: function create() {
			option = element("option");
			option.__value = /*filepath*/ ctx[14];
			option.value = option.__value;
			add_location(option, file, 47, 8, 1680);
		},
		m: function mount(target, anchor) {
			insert_dev(target, option, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(option);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(47:6) {#each all_files as filepath}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div3;
	let div0;
	let h20;
	let t1;
	let span;
	let br0;
	let t3;
	let label0;
	let t5;
	let input0;
	let t6;
	let datalist;
	let t7;
	let button;
	let t9;
	let br1;
	let t10;
	let div1;
	let h21;
	let t12;
	let label1;
	let input1;
	let t14;
	let br2;
	let t15;
	let div2;
	let h22;
	let t17;
	let label2;
	let input2;
	let t19;
	let br3;
	let t20;
	let label3;
	let input3;
	let t22;
	let br4;
	let t23;
	let excludedfolders;
	let t24;
	let excludedfilenames;
	let t25;
	let p;
	let t26;
	let a0;
	let t28;
	let a1;
	let t30;
	let br5;
	let br6;
	let t31;
	let a2;
	let t33;
	let a3;
	let t35;
	let a4;
	let t37;
	let current;
	let mounted;
	let dispose;
	let each_value = /*all_files*/ ctx[5];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	excludedfolders = new ExcludedFolders({
			props: {
				app: /*app*/ ctx[0],
				plugin: /*plugin*/ ctx[1]
			},
			$$inline: true
		});

	excludedfilenames = new ExcludedFilenames({
			props: {
				app: /*app*/ ctx[0],
				plugin: /*plugin*/ ctx[1]
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div3 = element("div");
			div0 = element("div");
			h20 = element("h2");
			h20.textContent = "Path of your Central Note";
			t1 = text("\n    Current path: ");
			span = element("span");
			span.textContent = `${/*current_tli*/ ctx[6]}`;
			br0 = element("br");
			t3 = space();
			label0 = element("label");
			label0.textContent = "New path:";
			t5 = space();
			input0 = element("input");
			t6 = space();
			datalist = element("datalist");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t7 = space();
			button = element("button");
			button.textContent = "Save";
			t9 = space();
			br1 = element("br");
			t10 = space();
			div1 = element("div");
			h21 = element("h2");
			h21.textContent = "Auto-updating the Map of Content";
			t12 = space();
			label1 = element("label");
			label1.textContent = "Update when switching between files\n    ";
			input1 = element("input");
			t14 = space();
			br2 = element("br");
			t15 = space();
			div2 = element("div");
			h22 = element("h2");
			h22.textContent = "Path and descendants";
			t17 = space();
			label2 = element("label");
			label2.textContent = "Display the path from the Central Note starting at the Central Note\n    ";
			input2 = element("input");
			t19 = space();
			br3 = element("br");
			t20 = space();
			label3 = element("label");
			label3.textContent = "Remember whether a file's descendants are shown or hidden\n    ";
			input3 = element("input");
			t22 = space();
			br4 = element("br");
			t23 = space();
			create_component(excludedfolders.$$.fragment);
			t24 = space();
			create_component(excludedfilenames.$$.fragment);
			t25 = space();
			p = element("p");
			t26 = text("For support and suggesting feature ideas, visit the plugin's ");
			a0 = element("a");
			a0.textContent = "GitHub page";
			t28 = text("\n    or\n    ");
			a1 = element("a");
			a1.textContent = "this post";
			t30 = text("\n    in the official Obsidian forum.\n    ");
			br5 = element("br");
			br6 = element("br");
			t31 = text("\n    You can support the development by donating on\n    ");
			a2 = element("a");
			a2.textContent = "Patreon";
			t33 = text(",\n    ");
			a3 = element("a");
			a3.textContent = "Ko-Fi";
			t35 = text("\n    or ");
			a4 = element("a");
			a4.textContent = "PayPal";
			t37 = text(". Thank\n    you!");
			attr_dev(h20, "class", "svelte-83jj2u");
			add_location(h20, file, 33, 4, 1261);
			attr_dev(span, "id", "tli_path");
			add_location(span, file, 34, 23, 1319);
			add_location(br0, file, 34, 63, 1359);
			attr_dev(label0, "for", "myBrowser");
			add_location(label0, file, 35, 4, 1370);
			attr_dev(input0, "type", "text");
			attr_dev(input0, "list", "notes");
			attr_dev(input0, "id", "CN_select");
			attr_dev(input0, "placeholder", "Start typing to see suggestions...");
			attr_dev(input0, "class", "svelte-83jj2u");
			add_location(input0, file, 36, 4, 1416);
			attr_dev(datalist, "id", "notes");
			add_location(datalist, file, 45, 4, 1614);
			attr_dev(button, "id", "update_TLI_path_button");
			attr_dev(button, "type", "button");
			attr_dev(button, "class", "svelte-83jj2u");
			add_location(button, file, 50, 4, 1736);
			attr_dev(div0, "class", "path");
			add_location(div0, file, 32, 2, 1238);
			add_location(br1, file, 58, 2, 1885);
			attr_dev(h21, "class", "svelte-83jj2u");
			add_location(h21, file, 60, 4, 1904);
			attr_dev(label1, "for", "auto-update-file-switch");
			add_location(label1, file, 61, 4, 1950);
			attr_dev(input1, "type", "checkbox");
			attr_dev(input1, "id", "auto-update-file-switch");
			input1.checked = /*settings*/ ctx[4].get("auto_update_on_file_change");
			add_location(input1, file, 63, 12, 2042);
			add_location(div1, file, 59, 2, 1894);
			add_location(br2, file, 75, 2, 2365);
			attr_dev(h22, "class", "svelte-83jj2u");
			add_location(h22, file, 77, 4, 2384);
			attr_dev(label2, "for", "MOC_path_starts_at_CN_checkbox");
			add_location(label2, file, 79, 4, 2419);
			attr_dev(input2, "type", "checkbox");
			attr_dev(input2, "id", "MOC_path_starts_at_CN_checkbox");
			input2.checked = /*settings*/ ctx[4].get("MOC_path_starts_at_CN");
			add_location(input2, file, 81, 12, 2550);
			add_location(br3, file, 92, 4, 2858);
			attr_dev(label3, "for", "do_remember_expanded_checkbox");
			add_location(label3, file, 93, 4, 2869);
			attr_dev(input3, "type", "checkbox");
			attr_dev(input3, "id", "do_remember_expanded_checkbox");
			input3.checked = /*settings*/ ctx[4].get("do_remember_expanded");
			add_location(input3, file, 95, 12, 2989);
			add_location(div2, file, 76, 2, 2374);
			add_location(br4, file, 107, 2, 3300);
			attr_dev(a0, "href", "https://github.com/Robin-Haupt-1/Obsidian-Map-of-Content");
			add_location(a0, file, 111, 65, 3454);
			attr_dev(a1, "href", "https://forum.obsidian.md/t/map-of-content-plugin-release/25209");
			add_location(a1, file, 117, 4, 3571);
			add_location(br5, file, 121, 4, 3711);
			add_location(br6, file, 121, 10, 3717);
			attr_dev(a2, "href", "https://www.patreon.com/RobinHaupt");
			add_location(a2, file, 123, 4, 3779);
			attr_dev(a3, "href", "https://ko-fi.com/robinhaupt");
			add_location(a3, file, 124, 4, 3841);
			attr_dev(a4, "href", "https://www.paypal.com/paypalme/robinhaupt");
			add_location(a4, file, 125, 7, 3897);
			add_location(p, file, 110, 2, 3385);
			attr_dev(div3, "id", "settings-container");
			attr_dev(div3, "class", "svelte-83jj2u");
			add_location(div3, file, 31, 0, 1206);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div3, anchor);
			append_dev(div3, div0);
			append_dev(div0, h20);
			append_dev(div0, t1);
			append_dev(div0, span);
			append_dev(div0, br0);
			append_dev(div0, t3);
			append_dev(div0, label0);
			append_dev(div0, t5);
			append_dev(div0, input0);
			/*input0_binding*/ ctx[8](input0);
			set_input_value(input0, /*cn_path_input_value*/ ctx[3]);
			append_dev(div0, t6);
			append_dev(div0, datalist);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(datalist, null);
			}

			append_dev(div0, t7);
			append_dev(div0, button);
			append_dev(div3, t9);
			append_dev(div3, br1);
			append_dev(div3, t10);
			append_dev(div3, div1);
			append_dev(div1, h21);
			append_dev(div1, t12);
			append_dev(div1, label1);
			append_dev(div1, input1);
			append_dev(div3, t14);
			append_dev(div3, br2);
			append_dev(div3, t15);
			append_dev(div3, div2);
			append_dev(div2, h22);
			append_dev(div2, t17);
			append_dev(div2, label2);
			append_dev(div2, input2);
			append_dev(div2, t19);
			append_dev(div2, br3);
			append_dev(div2, t20);
			append_dev(div2, label3);
			append_dev(div2, input3);
			append_dev(div3, t22);
			append_dev(div3, br4);
			append_dev(div3, t23);
			mount_component(excludedfolders, div3, null);
			append_dev(div3, t24);
			mount_component(excludedfilenames, div3, null);
			append_dev(div3, t25);
			append_dev(div3, p);
			append_dev(p, t26);
			append_dev(p, a0);
			append_dev(p, t28);
			append_dev(p, a1);
			append_dev(p, t30);
			append_dev(p, br5);
			append_dev(p, br6);
			append_dev(p, t31);
			append_dev(p, a2);
			append_dev(p, t33);
			append_dev(p, a3);
			append_dev(p, t35);
			append_dev(p, a4);
			append_dev(p, t37);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(input0, "input", /*input0_input_handler*/ ctx[9]),
					listen_dev(button, "click", /*click_handler*/ ctx[10], false, false, false),
					listen_dev(input1, "click", /*click_handler_1*/ ctx[11], false, false, false),
					listen_dev(input2, "click", /*click_handler_2*/ ctx[12], false, false, false),
					listen_dev(input3, "click", /*click_handler_3*/ ctx[13], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*cn_path_input_value*/ 8 && input0.value !== /*cn_path_input_value*/ ctx[3]) {
				set_input_value(input0, /*cn_path_input_value*/ ctx[3]);
			}

			if (dirty & /*all_files*/ 32) {
				each_value = /*all_files*/ ctx[5];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(datalist, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			const excludedfolders_changes = {};
			if (dirty & /*app*/ 1) excludedfolders_changes.app = /*app*/ ctx[0];
			if (dirty & /*plugin*/ 2) excludedfolders_changes.plugin = /*plugin*/ ctx[1];
			excludedfolders.$set(excludedfolders_changes);
			const excludedfilenames_changes = {};
			if (dirty & /*app*/ 1) excludedfilenames_changes.app = /*app*/ ctx[0];
			if (dirty & /*plugin*/ 2) excludedfilenames_changes.plugin = /*plugin*/ ctx[1];
			excludedfilenames.$set(excludedfilenames_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(excludedfolders.$$.fragment, local);
			transition_in(excludedfilenames.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(excludedfolders.$$.fragment, local);
			transition_out(excludedfilenames.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div3);
			/*input0_binding*/ ctx[8](null);
			destroy_each(each_blocks, detaching);
			destroy_component(excludedfolders);
			destroy_component(excludedfilenames);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Settings', slots, []);
	
	let { app } = $$props;
	let { plugin } = $$props;
	let cn_input;
	let settings = plugin.settings;

	// TODO check the db is complete before allow settings changes (maybe have this svelte only do that and load all other components from other svelte files)
	// TODO lazy load all the file names and folders?
	// get list of all files for dropdown menu
	let all_files = app.vault.getFiles().map(file => file.path);

	Log("Central note path: " + settings.get("CN_path"));
	let cn_path_input_value;
	let current_tli = settings.get("CN_path");

	const updateCNPath = () => {
		if (!cn_path_input_value) {
			return;
		}

		// change TLI path
		settings.set({ CN_path: cn_path_input_value });
		document.getElementById("tli_path").textContent = cn_path_input_value;
		new obsidian.Notice("New Central Note path saved");

		// clear selection dropdown list
		$$invalidate(2, cn_input.value = "", cn_input);

		$$invalidate(3, cn_path_input_value = "");
	};

	const writable_props = ['app', 'plugin'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Settings> was created with unknown prop '${key}'`);
	});

	function input0_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			cn_input = $$value;
			$$invalidate(2, cn_input);
		});
	}

	function input0_input_handler() {
		cn_path_input_value = this.value;
		$$invalidate(3, cn_path_input_value);
	}

	const click_handler = () => {
		updateCNPath();
	};

	const click_handler_1 = () => {
		let enabled = !settings.get("auto_update_on_file_change");
		settings.set({ auto_update_on_file_change: enabled });
	};

	const click_handler_2 = () => {
		let enabled = !settings.get("MOC_path_starts_at_CN");
		settings.set({ MOC_path_starts_at_CN: enabled });
	};

	const click_handler_3 = () => {
		let enabled = !settings.get("do_remember_expanded");
		settings.set({ do_remember_expanded: enabled });
	};

	$$self.$$set = $$props => {
		if ('app' in $$props) $$invalidate(0, app = $$props.app);
		if ('plugin' in $$props) $$invalidate(1, plugin = $$props.plugin);
	};

	$$self.$capture_state = () => ({
		App: obsidian.App,
		Notice: obsidian.Notice,
		TFile: obsidian.TFile,
		Log,
		GetAllFolders,
		ExcludedFolders,
		ExcludedFilenames,
		app,
		plugin,
		cn_input,
		settings,
		all_files,
		cn_path_input_value,
		current_tli,
		updateCNPath
	});

	$$self.$inject_state = $$props => {
		if ('app' in $$props) $$invalidate(0, app = $$props.app);
		if ('plugin' in $$props) $$invalidate(1, plugin = $$props.plugin);
		if ('cn_input' in $$props) $$invalidate(2, cn_input = $$props.cn_input);
		if ('settings' in $$props) $$invalidate(4, settings = $$props.settings);
		if ('all_files' in $$props) $$invalidate(5, all_files = $$props.all_files);
		if ('cn_path_input_value' in $$props) $$invalidate(3, cn_path_input_value = $$props.cn_path_input_value);
		if ('current_tli' in $$props) $$invalidate(6, current_tli = $$props.current_tli);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		app,
		plugin,
		cn_input,
		cn_path_input_value,
		settings,
		all_files,
		current_tli,
		updateCNPath,
		input0_binding,
		input0_input_handler,
		click_handler,
		click_handler_1,
		click_handler_2,
		click_handler_3
	];
}

class Settings extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { app: 0, plugin: 1 }, add_css);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Settings",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*app*/ ctx[0] === undefined && !('app' in props)) {
			console.warn("<Settings> was created without expected prop 'app'");
		}

		if (/*plugin*/ ctx[1] === undefined && !('plugin' in props)) {
			console.warn("<Settings> was created without expected prop 'plugin'");
		}
	}

	get app() {
		throw new Error("<Settings>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set app(value) {
		throw new Error("<Settings>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get plugin() {
		throw new Error("<Settings>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set plugin(value) {
		throw new Error("<Settings>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

const DEFAULT_SETTINGS = {
    CN_path: "Central Note.md",
    exluded_folders: [],
    exluded_filename_components: [],
    settings_version: "0.1.16",
    plugin_version: "0.1.16",
    do_show_update_notice: false,
    auto_update_on_file_change: true,
    do_remember_expanded: false,
    MOC_path_starts_at_CN: false,
    file_descendants_expanded: {},
};
class SettingsManager {
    constructor(plugin) {
        this.plugin = plugin;
    }
    async loadSettings() {
        this.settings = Object.assign({}, DEFAULT_SETTINGS, this.UpgradeSettingsVersion(await this.plugin.loadData()));
        this.saveSettings();
    }
    async saveSettings() {
        await this.plugin.saveData(this.settings);
    }
    async set(updates) {
        Object.assign(this.settings, updates);
        await this.plugin.saveData(this.settings);
    }
    get(setting) {
        return this.settings[setting];
    }
    UpgradeSettingsVersion(object) {
        // TODO remove deleted/renamed files from the is_expanded object
        try {
            // if fresh install, go with defaults
            if (object == undefined) {
                Log("fresh install, returning empty settings object");
                return {};
            }
            // abort if settings are already in current version format
            if (object["settings_version"] === DEFAULT_SETTINGS["settings_version"]) {
                Log("Settings already in current version");
                return object;
            }
            // clone the object
            object = JSON.parse(JSON.stringify(object));
            let object_keys = Object.keys(object);
            Log("old settings object: " + String(object_keys));
            let old_version = undefined;
            // determine which version the legacy object is from
            if (!object_keys.contains("settings_version")) {
                old_version = "pre-0.1.10";
            }
            else {
                old_version = object["settings_version"];
            }
            Log("old settings version: " + old_version);
            if (old_version === "pre-0.1.10") {
                // extract the CN path from CN_path_per_vault and save it as CN_path
                Log("Converting CN path from pre-0.1.10 to 0.1.10");
                let cn_settings_vault_names = object["CN_path_per_vault"].map((val) => val[0]); // get just the name of all vaults there's a CN stored for
                if (cn_settings_vault_names.contains(this.plugin.app.vault.getName())) {
                    object["CN_path"] =
                        object["CN_path_per_vault"][cn_settings_vault_names.indexOf(this.plugin.app.vault.getName())][1];
                }
                else {
                    delete object["CN_path"];
                }
                delete object["CN_path_per_vault"];
                object["settings_version"] = "0.1.10";
            } // clone the object
            let generic_update_versions = ["0.1.10", "0.1.12", "0.1.14"];
            if (generic_update_versions.contains(old_version)) {
                Log("performing generic update of settings to " +
                    DEFAULT_SETTINGS["settings_version"]);
                object["plugin_version"] = DEFAULT_SETTINGS["settings_version"];
                object["settings_version"] = DEFAULT_SETTINGS["settings_version"];
                object["do_show_update_notice"] = true;
            }
            let silent_generic_update_versions = ["0.1.15"];
            if (silent_generic_update_versions.contains(old_version)) {
                Log("performing silent generic update of settings to " +
                    DEFAULT_SETTINGS["settings_version"]);
                object["plugin_version"] = DEFAULT_SETTINGS["settings_version"];
                object["settings_version"] = DEFAULT_SETTINGS["settings_version"];
                object["do_show_update_notice"] = false;
            }
            return this.UpgradeSettingsVersion(object);
        }
        catch (_a) {
            return {};
        }
    }
    isExludedFile(file) {
        let path_to_file = file.path;
        let in_excluded_folder = this.get("exluded_folders").some((path) => path_to_file.startsWith(path));
        if (in_excluded_folder) {
            return true;
        }
        let filename = file.basename + "." + file.extension;
        let has_excluded_filename = this.get("exluded_filename_components").some((phrase) => filename.contains(phrase));
        return has_excluded_filename;
    }
    isExpanded(path) {
        if (!this.get("do_remember_expanded"))
            return true;
        let current_settings = this.get("file_descendants_expanded");
        if (Object.keys(current_settings).contains(path)) {
            return current_settings[path];
        }
        let new_settings = Object.assign(current_settings, { path: true });
        this.set({ file_descendants_expanded: new_settings });
        return true;
    }
    setExpanded(path, expanded) {
        if (!this.get("do_remember_expanded"))
            return;
        let new_val = {};
        new_val[path] = expanded;
        let new_settings = Object.assign({}, this.get("file_descendants_expanded"), new_val);
        this.set({ file_descendants_expanded: new_settings });
        return true;
    }
}
class MOCSettingTab extends obsidian.PluginSettingTab {
    constructor(plugin) {
        super(plugin.app, plugin);
        this.plugin = plugin;
        this.db = plugin.db;
        this._app = undefined;
    }
    display() {
        if (this._app) {
            this._app.$destroy();
            this._app = undefined;
        }
        this._app = new Settings({
            target: this.containerEl,
            props: { app: this.app, plugin: this.plugin },
        });
    }
    hide() {
        this.plugin.db.update();
    }
}

class MOCPlugin extends obsidian.Plugin {
    async onload() {
        this.settings = new SettingsManager(this);
        await this.settings.loadSettings();
        this.db = new DBManager(this);
        this.registerView(MOC_VIEW_TYPE, (leaf) => (this.view = new MOCView(leaf, this)));
        this.app.workspace.onLayoutReady(() => this.initializePlugin());
    }
    async initializePlugin() {
        this.addSettingTab(new MOCSettingTab(this));
        this.initLeaf();
        this.db.update(true);
        this.addRibbonIcon("sync", "Update Map of Content", async () => {
            await this.db.update();
        });
        this.addCommand({
            id: "rebuild-map-of-content",
            name: "Update Map of Content",
            callback: () => {
                this.db.update();
            },
        });
        this.addCommand({
            id: "show-map-of-content-pane",
            name: "Show Map of Content pane",
            callback: () => {
                this.initLeaf();
            },
        });
        this.addCommand({
            id: "open-note-as-central-note",
            name: "Set current note as Central Note",
            callback: () => {
                let errors = [];
                // make sure a file is opened
                if (this.app.workspace.getActiveFile() == null) {
                    errors.push("No file has been opened");
                }
                else if (this.settings.isExludedFile(this.app.workspace.getActiveFile())) {
                    errors.push("This file has been excluded from the Map of Content.");
                }
                if (errors.length) {
                    new obsidian.Notice(errors[0]);
                    return;
                }
                this.settings.set({ CN_path: this.app.workspace.getActiveFile().path });
                this.db.update();
            },
        });
    }
    initLeaf() {
        if (this.app.workspace.getLeavesOfType(MOC_VIEW_TYPE).length) ;
        else {
            this.app.workspace.getRightLeaf(true).setViewState({
                type: MOC_VIEW_TYPE,
                active: true,
            });
        }
    }
    rerender() {
        if (this.view) {
            this.view.rerender();
        }
    }
    onunload() {
        if (this.view) {
            this.view.onClose();
        }
        this.app.workspace.detachLeavesOfType(MOC_VIEW_TYPE);
    }
    CNexists() {
        let exists = !(this.app.vault.getAbstractFileByPath(this.settings.get("CN_path")) == null);
        return exists;
    }
    registerViewInstance(view) {
        this.view = view;
    }
    unregisterViewInstance(view) {
        this.view = undefined;
    }
}

module.exports = MOCPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
